// <autogenerated />

using SerializationHelpers = DuckDbSharp.SerializationHelpers;

namespace DuckDbFuzzingGeneratedTypes
{

    public static class AotSerializers
    {
        public static void RegisterAll()
        {
            SerializationHelpers.RegisterSerializer(typeof(DuckDbSharp.FuzzingTypes.MyClass), SerializeColumns_DuckDbSharp_FuzzingTypes_MyClass);
            SerializationHelpers.RegisterDeserializer(typeof(DuckDbSharp.FuzzingTypes.MyClass), DeserializeColumns_DuckDbSharp_FuzzingTypes_MyClass8b205741ac6669ebf1484ebda6afbd6984d3db24ebd4eba1095a8705dde0dd91, "8b205741ac6669ebf1484ebda6afbd6984d3db24ebd4eba1095a8705dde0dd91");
        }
        private static void SerializeField_DuckDbSharp_FuzzingTypes_MyClass_Id(nint vectorPtr, DuckDbSharp.FuzzingTypes.MyClass[] objects, int objectsLength, nint parentValidity, DuckDbSharp.Bindings.NativeArenaSlim arena)
        {
            var validityVector = SerializationHelpers.GetVectorValidityAndSetAll(vectorPtr);
            var vectorSpan = SerializationHelpers.GetVectorData<int>(vectorPtr, objectsLength);
            var i = 0;
            i = 0;
            while (true)
            {
                if (i >= vectorSpan.Length)
                {
                    break;
                }
            
                var arrayItem = objects[i];
            
                if (SerializationHelpers.IsPresent(parentValidity, i) && !(arrayItem == null))
                {
                    SerializationHelpers.AssignSpanItem(vectorSpan, i, arrayItem.Id);
                }
                else
                {
                    SerializationHelpers.SetNotPresent(validityVector, i);
                }
                i++;
            }
        }

        private static void SerializeField_DuckDbSharp_FuzzingTypes_WithNullishDefault_Num(nint vectorPtr, DuckDbSharp.FuzzingTypes.WithNullishDefault[] objects, int objectsLength, nint parentValidity, DuckDbSharp.Bindings.NativeArenaSlim arena)
        {
            var validityVector = SerializationHelpers.GetVectorValidityAndSetAll(vectorPtr);
            var vectorSpan = SerializationHelpers.GetVectorData<long>(vectorPtr, objectsLength);
            var i = 0;
            i = 0;
            while (true)
            {
                if (i >= vectorSpan.Length)
                {
                    break;
                }
            
                var arrayItem = objects[i];
            
                if (SerializationHelpers.IsPresent(parentValidity, i))
                {
                    SerializationHelpers.AssignSpanItem(vectorSpan, i, arrayItem.Num);
                }
                else
                {
                    SerializationHelpers.SetNotPresent(validityVector, i);
                }
                i++;
            }
        }

        private static void SerializeField_DuckDbSharp_FuzzingTypes_WithNullishDefault_Str(nint vectorPtr, DuckDbSharp.FuzzingTypes.WithNullishDefault[] objects, int objectsLength, nint parentValidity, DuckDbSharp.Bindings.NativeArenaSlim arena)
        {
            var validityVector = SerializationHelpers.GetVectorValidityAndSetAll(vectorPtr);
            var vectorSpan = SerializationHelpers.GetVectorData<DuckDbSharp.Types.DuckString>(vectorPtr, objectsLength);
            var i = 0;
            i = 0;
            while (true)
            {
                if (i >= vectorSpan.Length)
                {
                    break;
                }
            
                var arrayItem = objects[i];
            
                if (SerializationHelpers.IsPresent(parentValidity, i) && !(arrayItem.Str == null))
                {
                    SerializationHelpers.AssignSpanItem(vectorSpan, i, SerializationHelpers.SerializeString(arrayItem.Str, arena));
                }
                else
                {
                    SerializationHelpers.SetNotPresent(validityVector, i);
                }
                i++;
            }
        }

        private static void SerializeStruct_DuckDbSharp_FuzzingTypes_WithNullishDefault(nint vectorPtr, DuckDbSharp.FuzzingTypes.WithNullishDefault[] objects, int objectsLength, nint parentValidity, DuckDbSharp.Bindings.NativeArenaSlim arena)
        {
            var validityVector = SerializationHelpers.GetVectorValidityAndSetAll(vectorPtr);
            var i = 0;
            while (true)
            {
                if (i >= objectsLength)
                {
                    break;
                }
            
                if (!(SerializationHelpers.IsPresent(parentValidity, i) && !SerializationHelpers.IsDefaultStructValue(objects[i])))
                {
                    SerializationHelpers.SetNotPresent(validityVector, i);
                }
            
                i++;
            }
            SerializeField_DuckDbSharp_FuzzingTypes_WithNullishDefault_Num(SerializationHelpers.GetStructureChildVector(vectorPtr, 0), objects, objectsLength, validityVector, arena);
            SerializeField_DuckDbSharp_FuzzingTypes_WithNullishDefault_Str(SerializationHelpers.GetStructureChildVector(vectorPtr, 1), objects, objectsLength, validityVector, arena);
        }

        private static void SerializeField_DuckDbSharp_FuzzingTypes_MyClass_WithNullishDefault(nint vectorPtr, DuckDbSharp.FuzzingTypes.MyClass[] objects, int objectsLength, nint parentValidity, DuckDbSharp.Bindings.NativeArenaSlim arena)
        {
            var validityVector = SerializationHelpers.GetVectorValidityAndSetAll(vectorPtr);
            var subobjects = SerializationHelpers.RentArray<DuckDbSharp.FuzzingTypes.WithNullishDefault>(objectsLength);
            var rowId = 0;
            while (true)
            {
                if (rowId >= objectsLength)
                {
                    break;
                }
            
                if ((SerializationHelpers.IsPresent(parentValidity, rowId) &&
                    !(objects[rowId] == null)) &&
                    !SerializationHelpers.IsDefaultStructValue(objects[rowId].WithNullishDefault))
                {
                    subobjects[rowId] = objects[rowId].WithNullishDefault;
                }
                else
                {
                    SerializationHelpers.SetNotPresent(validityVector, rowId);
                }
                rowId++;
            }
            SerializeStruct_DuckDbSharp_FuzzingTypes_WithNullishDefault(vectorPtr, subobjects, rowId, validityVector, arena);
            SerializationHelpers.ReleaseArray<DuckDbSharp.FuzzingTypes.WithNullishDefault>(subobjects);
        }

        private static void SerializeField_DuckDbSharp_FuzzingTypes_SomeStruct_Num(nint vectorPtr, DuckDbSharp.FuzzingTypes.SomeStruct[] objects, int objectsLength, nint parentValidity, DuckDbSharp.Bindings.NativeArenaSlim arena)
        {
            var validityVector = SerializationHelpers.GetVectorValidityAndSetAll(vectorPtr);
            var vectorSpan = SerializationHelpers.GetVectorData<long>(vectorPtr, objectsLength);
            var i = 0;
            i = 0;
            while (true)
            {
                if (i >= vectorSpan.Length)
                {
                    break;
                }
            
                var arrayItem = objects[i];
            
                if (SerializationHelpers.IsPresent(parentValidity, i))
                {
                    SerializationHelpers.AssignSpanItem(vectorSpan, i, arrayItem.Num);
                }
                else
                {
                    SerializationHelpers.SetNotPresent(validityVector, i);
                }
                i++;
            }
        }

        private static void SerializeStruct_DuckDbSharp_FuzzingTypes_SomeStruct(nint vectorPtr, DuckDbSharp.FuzzingTypes.SomeStruct[] objects, int objectsLength, nint parentValidity, DuckDbSharp.Bindings.NativeArenaSlim arena)
        {
            var validityVector = SerializationHelpers.GetVectorValidityAndSetAll(vectorPtr);
            var i = 0;
            while (true)
            {
                if (i >= objectsLength)
                {
                    break;
                }
            
                if (!SerializationHelpers.IsPresent(parentValidity, i))
                {
                    SerializationHelpers.SetNotPresent(validityVector, i);
                }
            
                i++;
            }
            SerializeField_DuckDbSharp_FuzzingTypes_SomeStruct_Num(SerializationHelpers.GetStructureChildVector(vectorPtr, 0), objects, objectsLength, validityVector, arena);
        }

        private static void SerializeField_DuckDbSharp_FuzzingTypes_MyClass_SomeStruct(nint vectorPtr, DuckDbSharp.FuzzingTypes.MyClass[] objects, int objectsLength, nint parentValidity, DuckDbSharp.Bindings.NativeArenaSlim arena)
        {
            var validityVector = SerializationHelpers.GetVectorValidityAndSetAll(vectorPtr);
            var subobjects = SerializationHelpers.RentArray<DuckDbSharp.FuzzingTypes.SomeStruct>(objectsLength);
            var rowId = 0;
            while (true)
            {
                if (rowId >= objectsLength)
                {
                    break;
                }
            
                if (SerializationHelpers.IsPresent(parentValidity, rowId) &&
                    !(objects[rowId] == null))
                {
                    subobjects[rowId] = objects[rowId].SomeStruct;
                }
                else
                {
                    SerializationHelpers.SetNotPresent(validityVector, rowId);
                }
                rowId++;
            }
            SerializeStruct_DuckDbSharp_FuzzingTypes_SomeStruct(vectorPtr, subobjects, rowId, validityVector, arena);
            SerializationHelpers.ReleaseArray<DuckDbSharp.FuzzingTypes.SomeStruct>(subobjects);
        }

        private static void SerializeField_Nullable_DuckDbSharp_FuzzingTypes_SomeStruct_Num(nint vectorPtr, DuckDbSharp.FuzzingTypes.SomeStruct?[] objects, int objectsLength, nint parentValidity, DuckDbSharp.Bindings.NativeArenaSlim arena)
        {
            var validityVector = SerializationHelpers.GetVectorValidityAndSetAll(vectorPtr);
            var vectorSpan = SerializationHelpers.GetVectorData<long>(vectorPtr, objectsLength);
            var i = 0;
            i = 0;
            while (true)
            {
                if (i >= vectorSpan.Length)
                {
                    break;
                }
            
                var arrayItem = objects[i];
            
                if (SerializationHelpers.IsPresent(parentValidity, i) && arrayItem.HasValue)
                {
                    SerializationHelpers.AssignSpanItem(vectorSpan, i, arrayItem.Value.Num);
                }
                else
                {
                    SerializationHelpers.SetNotPresent(validityVector, i);
                }
                i++;
            }
        }

        private static void SerializeStruct_Nullable_DuckDbSharp_FuzzingTypes_SomeStruct(nint vectorPtr, DuckDbSharp.FuzzingTypes.SomeStruct?[] objects, int objectsLength, nint parentValidity, DuckDbSharp.Bindings.NativeArenaSlim arena)
        {
            var validityVector = SerializationHelpers.GetVectorValidityAndSetAll(vectorPtr);
            var i = 0;
            while (true)
            {
                if (i >= objectsLength)
                {
                    break;
                }
            
                if (!(SerializationHelpers.IsPresent(parentValidity, i) && objects[i].HasValue))
                {
                    SerializationHelpers.SetNotPresent(validityVector, i);
                }
            
                i++;
            }
            SerializeField_Nullable_DuckDbSharp_FuzzingTypes_SomeStruct_Num(SerializationHelpers.GetStructureChildVector(vectorPtr, 0), objects, objectsLength, validityVector, arena);
        }

        private static void SerializeField_DuckDbSharp_FuzzingTypes_MyClass_SomeOptionalStruct(nint vectorPtr, DuckDbSharp.FuzzingTypes.MyClass[] objects, int objectsLength, nint parentValidity, DuckDbSharp.Bindings.NativeArenaSlim arena)
        {
            var validityVector = SerializationHelpers.GetVectorValidityAndSetAll(vectorPtr);
            var subobjects = SerializationHelpers.RentArray<DuckDbSharp.FuzzingTypes.SomeStruct?>(objectsLength);
            var rowId = 0;
            while (true)
            {
                if (rowId >= objectsLength)
                {
                    break;
                }
            
                if ((SerializationHelpers.IsPresent(parentValidity, rowId) &&
                    !(objects[rowId] == null)) &&
                    objects[rowId].SomeOptionalStruct.HasValue)
                {
                    subobjects[rowId] = (DuckDbSharp.FuzzingTypes.SomeStruct?)objects[rowId].SomeOptionalStruct.Value;
                }
                else
                {
                    SerializationHelpers.SetNotPresent(validityVector, rowId);
                }
                rowId++;
            }
            SerializeStruct_Nullable_DuckDbSharp_FuzzingTypes_SomeStruct(vectorPtr, subobjects, rowId, validityVector, arena);
            SerializationHelpers.ReleaseArray<DuckDbSharp.FuzzingTypes.SomeStruct?>(subobjects);
        }

        private static void SerializeField_DuckDbSharp_FuzzingTypes_InnerObj_TheVal(nint vectorPtr, DuckDbSharp.FuzzingTypes.InnerObj[] objects, int objectsLength, nint parentValidity, DuckDbSharp.Bindings.NativeArenaSlim arena)
        {
            var validityVector = SerializationHelpers.GetVectorValidityAndSetAll(vectorPtr);
            var vectorSpan = SerializationHelpers.GetVectorData<int>(vectorPtr, objectsLength);
            var i = 0;
            i = 0;
            while (true)
            {
                if (i >= vectorSpan.Length)
                {
                    break;
                }
            
                var arrayItem = objects[i];
            
                if ((SerializationHelpers.IsPresent(parentValidity, i) && !(arrayItem == null)) &&
                    arrayItem.TheVal.HasValue)
                {
                    SerializationHelpers.AssignSpanItem(vectorSpan, i, arrayItem.TheVal.Value);
                }
                else
                {
                    SerializationHelpers.SetNotPresent(validityVector, i);
                }
                i++;
            }
        }

        private static void SerializeField_DuckDbSharp_FuzzingTypes_InnerObj_Val2(nint vectorPtr, DuckDbSharp.FuzzingTypes.InnerObj[] objects, int objectsLength, nint parentValidity, DuckDbSharp.Bindings.NativeArenaSlim arena)
        {
            var validityVector = SerializationHelpers.GetVectorValidityAndSetAll(vectorPtr);
            var vectorSpan = SerializationHelpers.GetVectorData<int>(vectorPtr, objectsLength);
            var i = 0;
            i = 0;
            while (true)
            {
                if (i >= vectorSpan.Length)
                {
                    break;
                }
            
                var arrayItem = objects[i];
            
                if (SerializationHelpers.IsPresent(parentValidity, i) && !(arrayItem == null))
                {
                    SerializationHelpers.AssignSpanItem(vectorSpan, i, arrayItem.Val2);
                }
                else
                {
                    SerializationHelpers.SetNotPresent(validityVector, i);
                }
                i++;
            }
        }

        private static void SerializeField_DuckDbSharp_FuzzingTypes_InnerObj_B(nint vectorPtr, DuckDbSharp.FuzzingTypes.InnerObj[] objects, int objectsLength, nint parentValidity, DuckDbSharp.Bindings.NativeArenaSlim arena)
        {
            var validityVector = SerializationHelpers.GetVectorValidityAndSetAll(vectorPtr);
            var vectorSpan = SerializationHelpers.GetVectorData<DuckDbSharp.Types.DuckString>(vectorPtr, objectsLength);
            var i = 0;
            i = 0;
            while (true)
            {
                if (i >= vectorSpan.Length)
                {
                    break;
                }
            
                var arrayItem = objects[i];
            
                if ((SerializationHelpers.IsPresent(parentValidity, i) && !(arrayItem == null)) &&
                    !(arrayItem.B == null))
                {
                    SerializationHelpers.AssignSpanItem(vectorSpan, i, SerializationHelpers.SerializeString(arrayItem.B, arena));
                }
                else
                {
                    SerializationHelpers.SetNotPresent(validityVector, i);
                }
                i++;
            }
        }

        private static void SerializeField_DuckDbSharp_FuzzingTypes_EvenInner_Q(nint vectorPtr, DuckDbSharp.FuzzingTypes.EvenInner[] objects, int objectsLength, nint parentValidity, DuckDbSharp.Bindings.NativeArenaSlim arena)
        {
            var validityVector = SerializationHelpers.GetVectorValidityAndSetAll(vectorPtr);
            var vectorSpan = SerializationHelpers.GetVectorData<int>(vectorPtr, objectsLength);
            var i = 0;
            i = 0;
            while (true)
            {
                if (i >= vectorSpan.Length)
                {
                    break;
                }
            
                var arrayItem = objects[i];
            
                if ((SerializationHelpers.IsPresent(parentValidity, i) && !(arrayItem == null)) &&
                    arrayItem.Q.HasValue)
                {
                    SerializationHelpers.AssignSpanItem(vectorSpan, i, arrayItem.Q.Value);
                }
                else
                {
                    SerializationHelpers.SetNotPresent(validityVector, i);
                }
                i++;
            }
        }

        private static void SerializeStruct_DuckDbSharp_FuzzingTypes_EvenInner(nint vectorPtr, DuckDbSharp.FuzzingTypes.EvenInner[] objects, int objectsLength, nint parentValidity, DuckDbSharp.Bindings.NativeArenaSlim arena)
        {
            var validityVector = SerializationHelpers.GetVectorValidityAndSetAll(vectorPtr);
            var i = 0;
            while (true)
            {
                if (i >= objectsLength)
                {
                    break;
                }
            
                if (!(SerializationHelpers.IsPresent(parentValidity, i) && !(objects[i] == null)))
                {
                    SerializationHelpers.SetNotPresent(validityVector, i);
                }
            
                i++;
            }
            SerializeField_DuckDbSharp_FuzzingTypes_EvenInner_Q(SerializationHelpers.GetStructureChildVector(vectorPtr, 0), objects, objectsLength, validityVector, arena);
        }

        private static void SerializeField_DuckDbSharp_FuzzingTypes_InnerObj_EvenInner(nint vectorPtr, DuckDbSharp.FuzzingTypes.InnerObj[] objects, int objectsLength, nint parentValidity, DuckDbSharp.Bindings.NativeArenaSlim arena)
        {
            var validityVector = SerializationHelpers.GetVectorValidityAndSetAll(vectorPtr);
            var subobjects = SerializationHelpers.RentArray<DuckDbSharp.FuzzingTypes.EvenInner>(objectsLength);
            var rowId = 0;
            while (true)
            {
                if (rowId >= objectsLength)
                {
                    break;
                }
            
                if ((SerializationHelpers.IsPresent(parentValidity, rowId) &&
                    !(objects[rowId] == null)) &&
                    !(objects[rowId].EvenInner == null))
                {
                    subobjects[rowId] = objects[rowId].EvenInner;
                }
                else
                {
                    SerializationHelpers.SetNotPresent(validityVector, rowId);
                }
                rowId++;
            }
            SerializeStruct_DuckDbSharp_FuzzingTypes_EvenInner(vectorPtr, subobjects, rowId, validityVector, arena);
            SerializationHelpers.ReleaseArray<DuckDbSharp.FuzzingTypes.EvenInner>(subobjects);
        }

        private static void SerializeField_System_Int32(nint vectorPtr, int[] objects, int objectsLength, nint parentValidity, DuckDbSharp.Bindings.NativeArenaSlim arena)
        {
            var validityVector = SerializationHelpers.GetVectorValidityAndSetAll(vectorPtr);
            var vectorSpan = SerializationHelpers.GetVectorData<int>(vectorPtr, objectsLength);
            var i = 0;
            i = 0;
            while (true)
            {
                if (i >= vectorSpan.Length)
                {
                    break;
                }
            
                var arrayItem = objects[i];
            
                if (SerializationHelpers.IsPresent(parentValidity, i))
                {
                    SerializationHelpers.AssignSpanItem(vectorSpan, i, arrayItem);
                }
                else
                {
                    SerializationHelpers.SetNotPresent(validityVector, i);
                }
                i++;
            }
        }

        private static void SerializeField_DuckDbSharp_FuzzingTypes_InnerObj_ListOfIntInner(nint vectorPtr, DuckDbSharp.FuzzingTypes.InnerObj[] objects, int objectsLength, nint parentValidity, DuckDbSharp.Bindings.NativeArenaSlim arena)
        {
            int sublistLength, innerRelIdx;
            int[] sublist;
            var totalCount = 0;
            var offsetsAndLengths = SerializationHelpers.GetVectorData<DuckDbSharp.Types.OffsetAndCount>(vectorPtr, objectsLength);
            var validityVector = SerializationHelpers.GetVectorValidityAndSetAll(vectorPtr);
            var rowId = 0;
            while (true)
            {
                if (rowId >= objectsLength)
                {
                    break;
                }
            
                if ((SerializationHelpers.IsPresent(parentValidity, rowId) &&
                    !(objects[rowId] == null)) &&
                    !(objects[rowId].ListOfIntInner == null))
                {
                    sublist = objects[rowId].ListOfIntInner;
                    sublistLength = sublist.Length;
                    SerializationHelpers.AssignSpanItem(offsetsAndLengths, rowId, new DuckDbSharp.Types.OffsetAndCount(totalCount, sublistLength));
                    checked { totalCount += sublistLength; };
                }
                else
                {
                    SerializationHelpers.SetNotPresent(validityVector, rowId);
                }
            
                rowId++;
            }
            var subobjects = SerializationHelpers.RentArray<int>(totalCount);
            var innerAbsIdx = 0;
            rowId = 0;
            while (true)
            {
                if (rowId >= objectsLength)
                {
                    break;
                }
            
                if ((SerializationHelpers.IsPresent(parentValidity, rowId) &&
                    !(objects[rowId] == null)) &&
                    !(objects[rowId].ListOfIntInner == null))
                {
                    sublist = objects[rowId].ListOfIntInner;
                    sublistLength = sublist.Length;
                    innerRelIdx = 0;
                    while (true)
                    {
                        if (innerRelIdx >= sublistLength)
                        {
                            break;
                        }
            
                        subobjects[innerAbsIdx++] = sublist[innerRelIdx];
                        innerRelIdx++;
                    }
                }
                rowId++;
            }
            SerializeField_System_Int32(SerializationHelpers.GetSublistChildVectorAndReserve(vectorPtr, totalCount), subobjects, totalCount, 0, arena);
            SerializationHelpers.ReleaseArray<int>(subobjects);
        }

        private static void SerializeField_Nullable_System_Int32(nint vectorPtr, int?[] objects, int objectsLength, nint parentValidity, DuckDbSharp.Bindings.NativeArenaSlim arena)
        {
            var validityVector = SerializationHelpers.GetVectorValidityAndSetAll(vectorPtr);
            var vectorSpan = SerializationHelpers.GetVectorData<int>(vectorPtr, objectsLength);
            var i = 0;
            i = 0;
            while (true)
            {
                if (i >= vectorSpan.Length)
                {
                    break;
                }
            
                var arrayItem = objects[i];
            
                if (SerializationHelpers.IsPresent(parentValidity, i) && arrayItem.HasValue)
                {
                    SerializationHelpers.AssignSpanItem(vectorSpan, i, arrayItem.Value);
                }
                else
                {
                    SerializationHelpers.SetNotPresent(validityVector, i);
                }
                i++;
            }
        }

        private static void SerializeField_DuckDbSharp_FuzzingTypes_InnerObj_ListOfOptIntInner(nint vectorPtr, DuckDbSharp.FuzzingTypes.InnerObj[] objects, int objectsLength, nint parentValidity, DuckDbSharp.Bindings.NativeArenaSlim arena)
        {
            int sublistLength, innerRelIdx;
            int?[] sublist;
            var totalCount = 0;
            var offsetsAndLengths = SerializationHelpers.GetVectorData<DuckDbSharp.Types.OffsetAndCount>(vectorPtr, objectsLength);
            var validityVector = SerializationHelpers.GetVectorValidityAndSetAll(vectorPtr);
            var rowId = 0;
            while (true)
            {
                if (rowId >= objectsLength)
                {
                    break;
                }
            
                if ((SerializationHelpers.IsPresent(parentValidity, rowId) &&
                    !(objects[rowId] == null)) &&
                    !(objects[rowId].ListOfOptIntInner == null))
                {
                    sublist = objects[rowId].ListOfOptIntInner;
                    sublistLength = sublist.Length;
                    SerializationHelpers.AssignSpanItem(offsetsAndLengths, rowId, new DuckDbSharp.Types.OffsetAndCount(totalCount, sublistLength));
                    checked { totalCount += sublistLength; };
                }
                else
                {
                    SerializationHelpers.SetNotPresent(validityVector, rowId);
                }
            
                rowId++;
            }
            var subobjects = SerializationHelpers.RentArray<int?>(totalCount);
            var innerAbsIdx = 0;
            rowId = 0;
            while (true)
            {
                if (rowId >= objectsLength)
                {
                    break;
                }
            
                if ((SerializationHelpers.IsPresent(parentValidity, rowId) &&
                    !(objects[rowId] == null)) &&
                    !(objects[rowId].ListOfOptIntInner == null))
                {
                    sublist = objects[rowId].ListOfOptIntInner;
                    sublistLength = sublist.Length;
                    innerRelIdx = 0;
                    while (true)
                    {
                        if (innerRelIdx >= sublistLength)
                        {
                            break;
                        }
            
                        subobjects[innerAbsIdx++] = sublist[innerRelIdx];
                        innerRelIdx++;
                    }
                }
                rowId++;
            }
            SerializeField_Nullable_System_Int32(SerializationHelpers.GetSublistChildVectorAndReserve(vectorPtr, totalCount), subobjects, totalCount, 0, arena);
            SerializationHelpers.ReleaseArray<int?>(subobjects);
        }

        private static void SerializeField_DuckDbSharp_FuzzingTypes_InnerObj_ListOfObjs(nint vectorPtr, DuckDbSharp.FuzzingTypes.InnerObj[] objects, int objectsLength, nint parentValidity, DuckDbSharp.Bindings.NativeArenaSlim arena)
        {
            int sublistLength, innerRelIdx;
            DuckDbSharp.FuzzingTypes.EvenInner[] sublist;
            var totalCount = 0;
            var offsetsAndLengths = SerializationHelpers.GetVectorData<DuckDbSharp.Types.OffsetAndCount>(vectorPtr, objectsLength);
            var validityVector = SerializationHelpers.GetVectorValidityAndSetAll(vectorPtr);
            var rowId = 0;
            while (true)
            {
                if (rowId >= objectsLength)
                {
                    break;
                }
            
                if ((SerializationHelpers.IsPresent(parentValidity, rowId) &&
                    !(objects[rowId] == null)) &&
                    !(objects[rowId].ListOfObjs == null))
                {
                    sublist = objects[rowId].ListOfObjs;
                    sublistLength = sublist.Length;
                    SerializationHelpers.AssignSpanItem(offsetsAndLengths, rowId, new DuckDbSharp.Types.OffsetAndCount(totalCount, sublistLength));
                    checked { totalCount += sublistLength; };
                }
                else
                {
                    SerializationHelpers.SetNotPresent(validityVector, rowId);
                }
            
                rowId++;
            }
            var subobjects = SerializationHelpers.RentArray<DuckDbSharp.FuzzingTypes.EvenInner>(totalCount);
            var innerAbsIdx = 0;
            rowId = 0;
            while (true)
            {
                if (rowId >= objectsLength)
                {
                    break;
                }
            
                if ((SerializationHelpers.IsPresent(parentValidity, rowId) &&
                    !(objects[rowId] == null)) &&
                    !(objects[rowId].ListOfObjs == null))
                {
                    sublist = objects[rowId].ListOfObjs;
                    sublistLength = sublist.Length;
                    innerRelIdx = 0;
                    while (true)
                    {
                        if (innerRelIdx >= sublistLength)
                        {
                            break;
                        }
            
                        subobjects[innerAbsIdx++] = sublist[innerRelIdx];
                        innerRelIdx++;
                    }
                }
                rowId++;
            }
            SerializeStruct_DuckDbSharp_FuzzingTypes_EvenInner(SerializationHelpers.GetSublistChildVectorAndReserve(vectorPtr, totalCount), subobjects, totalCount, 0, arena);
            SerializationHelpers.ReleaseArray<DuckDbSharp.FuzzingTypes.EvenInner>(subobjects);
        }

        private static void SerializeField_DuckDbSharp_FuzzingTypes_EvenInnerStruct_TheVal(nint vectorPtr, DuckDbSharp.FuzzingTypes.EvenInnerStruct[] objects, int objectsLength, nint parentValidity, DuckDbSharp.Bindings.NativeArenaSlim arena)
        {
            var validityVector = SerializationHelpers.GetVectorValidityAndSetAll(vectorPtr);
            var vectorSpan = SerializationHelpers.GetVectorData<int>(vectorPtr, objectsLength);
            var i = 0;
            i = 0;
            while (true)
            {
                if (i >= vectorSpan.Length)
                {
                    break;
                }
            
                var arrayItem = objects[i];
            
                if (SerializationHelpers.IsPresent(parentValidity, i))
                {
                    SerializationHelpers.AssignSpanItem(vectorSpan, i, arrayItem.TheVal);
                }
                else
                {
                    SerializationHelpers.SetNotPresent(validityVector, i);
                }
                i++;
            }
        }

        private static void SerializeField_DuckDbSharp_FuzzingTypes_EvenInnerStruct(nint vectorPtr, DuckDbSharp.FuzzingTypes.EvenInnerStruct[] objects, int objectsLength, nint parentValidity, DuckDbSharp.Bindings.NativeArenaSlim arena)
        {
            var validityVector = SerializationHelpers.GetVectorValidityAndSetAll(vectorPtr);
            var i = 0;
            while (true)
            {
                if (i >= objectsLength)
                {
                    break;
                }
            
                if (!SerializationHelpers.IsPresent(parentValidity, i))
                {
                    SerializationHelpers.SetNotPresent(validityVector, i);
                }
            
                i++;
            }
            SerializeField_DuckDbSharp_FuzzingTypes_EvenInnerStruct_TheVal(SerializationHelpers.GetStructureChildVector(vectorPtr, 0), objects, objectsLength, validityVector, arena);
        }

        private static void SerializeField_DuckDbSharp_FuzzingTypes_InnerObj_ListOfNonNullStructs(nint vectorPtr, DuckDbSharp.FuzzingTypes.InnerObj[] objects, int objectsLength, nint parentValidity, DuckDbSharp.Bindings.NativeArenaSlim arena)
        {
            int sublistLength, innerRelIdx;
            DuckDbSharp.FuzzingTypes.EvenInnerStruct[] sublist;
            var totalCount = 0;
            var offsetsAndLengths = SerializationHelpers.GetVectorData<DuckDbSharp.Types.OffsetAndCount>(vectorPtr, objectsLength);
            var validityVector = SerializationHelpers.GetVectorValidityAndSetAll(vectorPtr);
            var rowId = 0;
            while (true)
            {
                if (rowId >= objectsLength)
                {
                    break;
                }
            
                if ((SerializationHelpers.IsPresent(parentValidity, rowId) &&
                    !(objects[rowId] == null)) &&
                    !(objects[rowId].ListOfNonNullStructs == null))
                {
                    sublist = objects[rowId].ListOfNonNullStructs;
                    sublistLength = sublist.Length;
                    SerializationHelpers.AssignSpanItem(offsetsAndLengths, rowId, new DuckDbSharp.Types.OffsetAndCount(totalCount, sublistLength));
                    checked { totalCount += sublistLength; };
                }
                else
                {
                    SerializationHelpers.SetNotPresent(validityVector, rowId);
                }
            
                rowId++;
            }
            var subobjects = SerializationHelpers.RentArray<DuckDbSharp.FuzzingTypes.EvenInnerStruct>(totalCount);
            var innerAbsIdx = 0;
            rowId = 0;
            while (true)
            {
                if (rowId >= objectsLength)
                {
                    break;
                }
            
                if ((SerializationHelpers.IsPresent(parentValidity, rowId) &&
                    !(objects[rowId] == null)) &&
                    !(objects[rowId].ListOfNonNullStructs == null))
                {
                    sublist = objects[rowId].ListOfNonNullStructs;
                    sublistLength = sublist.Length;
                    innerRelIdx = 0;
                    while (true)
                    {
                        if (innerRelIdx >= sublistLength)
                        {
                            break;
                        }
            
                        subobjects[innerAbsIdx++] = sublist[innerRelIdx];
                        innerRelIdx++;
                    }
                }
                rowId++;
            }
            SerializeField_DuckDbSharp_FuzzingTypes_EvenInnerStruct(SerializationHelpers.GetSublistChildVectorAndReserve(vectorPtr, totalCount), subobjects, totalCount, 0, arena);
            SerializationHelpers.ReleaseArray<DuckDbSharp.FuzzingTypes.EvenInnerStruct>(subobjects);
        }

        private static void SerializeField_Nullable_DuckDbSharp_FuzzingTypes_EvenInnerStruct_TheVal(nint vectorPtr, DuckDbSharp.FuzzingTypes.EvenInnerStruct?[] objects, int objectsLength, nint parentValidity, DuckDbSharp.Bindings.NativeArenaSlim arena)
        {
            var validityVector = SerializationHelpers.GetVectorValidityAndSetAll(vectorPtr);
            var vectorSpan = SerializationHelpers.GetVectorData<int>(vectorPtr, objectsLength);
            var i = 0;
            i = 0;
            while (true)
            {
                if (i >= vectorSpan.Length)
                {
                    break;
                }
            
                var arrayItem = objects[i];
            
                if (SerializationHelpers.IsPresent(parentValidity, i) && arrayItem.HasValue)
                {
                    SerializationHelpers.AssignSpanItem(vectorSpan, i, arrayItem.Value.TheVal);
                }
                else
                {
                    SerializationHelpers.SetNotPresent(validityVector, i);
                }
                i++;
            }
        }

        private static void SerializeField_Nullable_DuckDbSharp_FuzzingTypes_EvenInnerStruct(nint vectorPtr, DuckDbSharp.FuzzingTypes.EvenInnerStruct?[] objects, int objectsLength, nint parentValidity, DuckDbSharp.Bindings.NativeArenaSlim arena)
        {
            var validityVector = SerializationHelpers.GetVectorValidityAndSetAll(vectorPtr);
            var i = 0;
            while (true)
            {
                if (i >= objectsLength)
                {
                    break;
                }
            
                if (!(SerializationHelpers.IsPresent(parentValidity, i) && objects[i].HasValue))
                {
                    SerializationHelpers.SetNotPresent(validityVector, i);
                }
            
                i++;
            }
            SerializeField_Nullable_DuckDbSharp_FuzzingTypes_EvenInnerStruct_TheVal(SerializationHelpers.GetStructureChildVector(vectorPtr, 0), objects, objectsLength, validityVector, arena);
        }

        private static void SerializeField_DuckDbSharp_FuzzingTypes_InnerObj_ListOfOptionalStructs(nint vectorPtr, DuckDbSharp.FuzzingTypes.InnerObj[] objects, int objectsLength, nint parentValidity, DuckDbSharp.Bindings.NativeArenaSlim arena)
        {
            int sublistLength, innerRelIdx;
            DuckDbSharp.FuzzingTypes.EvenInnerStruct?[] sublist;
            var totalCount = 0;
            var offsetsAndLengths = SerializationHelpers.GetVectorData<DuckDbSharp.Types.OffsetAndCount>(vectorPtr, objectsLength);
            var validityVector = SerializationHelpers.GetVectorValidityAndSetAll(vectorPtr);
            var rowId = 0;
            while (true)
            {
                if (rowId >= objectsLength)
                {
                    break;
                }
            
                if ((SerializationHelpers.IsPresent(parentValidity, rowId) &&
                    !(objects[rowId] == null)) &&
                    !(objects[rowId].ListOfOptionalStructs == null))
                {
                    sublist = objects[rowId].ListOfOptionalStructs;
                    sublistLength = sublist.Length;
                    SerializationHelpers.AssignSpanItem(offsetsAndLengths, rowId, new DuckDbSharp.Types.OffsetAndCount(totalCount, sublistLength));
                    checked { totalCount += sublistLength; };
                }
                else
                {
                    SerializationHelpers.SetNotPresent(validityVector, rowId);
                }
            
                rowId++;
            }
            var subobjects = SerializationHelpers.RentArray<DuckDbSharp.FuzzingTypes.EvenInnerStruct?>(totalCount);
            var innerAbsIdx = 0;
            rowId = 0;
            while (true)
            {
                if (rowId >= objectsLength)
                {
                    break;
                }
            
                if ((SerializationHelpers.IsPresent(parentValidity, rowId) &&
                    !(objects[rowId] == null)) &&
                    !(objects[rowId].ListOfOptionalStructs == null))
                {
                    sublist = objects[rowId].ListOfOptionalStructs;
                    sublistLength = sublist.Length;
                    innerRelIdx = 0;
                    while (true)
                    {
                        if (innerRelIdx >= sublistLength)
                        {
                            break;
                        }
            
                        subobjects[innerAbsIdx++] = sublist[innerRelIdx];
                        innerRelIdx++;
                    }
                }
                rowId++;
            }
            SerializeField_Nullable_DuckDbSharp_FuzzingTypes_EvenInnerStruct(SerializationHelpers.GetSublistChildVectorAndReserve(vectorPtr, totalCount), subobjects, totalCount, 0, arena);
            SerializationHelpers.ReleaseArray<DuckDbSharp.FuzzingTypes.EvenInnerStruct?>(subobjects);
        }

        private static void SerializeStruct_DuckDbSharp_FuzzingTypes_InnerObj(nint vectorPtr, DuckDbSharp.FuzzingTypes.InnerObj[] objects, int objectsLength, nint parentValidity, DuckDbSharp.Bindings.NativeArenaSlim arena)
        {
            var validityVector = SerializationHelpers.GetVectorValidityAndSetAll(vectorPtr);
            var i = 0;
            while (true)
            {
                if (i >= objectsLength)
                {
                    break;
                }
            
                if (!(SerializationHelpers.IsPresent(parentValidity, i) && !(objects[i] == null)))
                {
                    SerializationHelpers.SetNotPresent(validityVector, i);
                }
            
                i++;
            }
            SerializeField_DuckDbSharp_FuzzingTypes_InnerObj_TheVal(SerializationHelpers.GetStructureChildVector(vectorPtr, 0), objects, objectsLength, validityVector, arena);
            SerializeField_DuckDbSharp_FuzzingTypes_InnerObj_Val2(SerializationHelpers.GetStructureChildVector(vectorPtr, 1), objects, objectsLength, validityVector, arena);
            SerializeField_DuckDbSharp_FuzzingTypes_InnerObj_B(SerializationHelpers.GetStructureChildVector(vectorPtr, 2), objects, objectsLength, validityVector, arena);
            SerializeField_DuckDbSharp_FuzzingTypes_InnerObj_EvenInner(SerializationHelpers.GetStructureChildVector(vectorPtr, 3), objects, objectsLength, validityVector, arena);
            SerializeField_DuckDbSharp_FuzzingTypes_InnerObj_ListOfIntInner(SerializationHelpers.GetStructureChildVector(vectorPtr, 4), objects, objectsLength, validityVector, arena);
            SerializeField_DuckDbSharp_FuzzingTypes_InnerObj_ListOfOptIntInner(SerializationHelpers.GetStructureChildVector(vectorPtr, 5), objects, objectsLength, validityVector, arena);
            SerializeField_DuckDbSharp_FuzzingTypes_InnerObj_ListOfObjs(SerializationHelpers.GetStructureChildVector(vectorPtr, 6), objects, objectsLength, validityVector, arena);
            SerializeField_DuckDbSharp_FuzzingTypes_InnerObj_ListOfNonNullStructs(SerializationHelpers.GetStructureChildVector(vectorPtr, 7), objects, objectsLength, validityVector, arena);
            SerializeField_DuckDbSharp_FuzzingTypes_InnerObj_ListOfOptionalStructs(SerializationHelpers.GetStructureChildVector(vectorPtr, 8), objects, objectsLength, validityVector, arena);
        }

        private static void SerializeField_DuckDbSharp_FuzzingTypes_MyClass_InnerObj(nint vectorPtr, DuckDbSharp.FuzzingTypes.MyClass[] objects, int objectsLength, nint parentValidity, DuckDbSharp.Bindings.NativeArenaSlim arena)
        {
            var validityVector = SerializationHelpers.GetVectorValidityAndSetAll(vectorPtr);
            var subobjects = SerializationHelpers.RentArray<DuckDbSharp.FuzzingTypes.InnerObj>(objectsLength);
            var rowId = 0;
            while (true)
            {
                if (rowId >= objectsLength)
                {
                    break;
                }
            
                if ((SerializationHelpers.IsPresent(parentValidity, rowId) &&
                    !(objects[rowId] == null)) &&
                    !(objects[rowId].InnerObj == null))
                {
                    subobjects[rowId] = objects[rowId].InnerObj;
                }
                else
                {
                    SerializationHelpers.SetNotPresent(validityVector, rowId);
                }
                rowId++;
            }
            SerializeStruct_DuckDbSharp_FuzzingTypes_InnerObj(vectorPtr, subobjects, rowId, validityVector, arena);
            SerializationHelpers.ReleaseArray<DuckDbSharp.FuzzingTypes.InnerObj>(subobjects);
        }

        private static void SerializeField_DuckDbSharp_FuzzingTypes_MyClass_C(nint vectorPtr, DuckDbSharp.FuzzingTypes.MyClass[] objects, int objectsLength, nint parentValidity, DuckDbSharp.Bindings.NativeArenaSlim arena)
        {
            var validityVector = SerializationHelpers.GetVectorValidityAndSetAll(vectorPtr);
            var vectorSpan = SerializationHelpers.GetVectorData<DuckDbSharp.Types.DuckString>(vectorPtr, objectsLength);
            var i = 0;
            i = 0;
            while (true)
            {
                if (i >= vectorSpan.Length)
                {
                    break;
                }
            
                var arrayItem = objects[i];
            
                if ((SerializationHelpers.IsPresent(parentValidity, i) && !(arrayItem == null)) &&
                    !(arrayItem.C == null))
                {
                    SerializationHelpers.AssignSpanItem(vectorSpan, i, SerializationHelpers.SerializeString(arrayItem.C, arena));
                }
                else
                {
                    SerializationHelpers.SetNotPresent(validityVector, i);
                }
                i++;
            }
        }

        private static void SerializeField_DuckDbSharp_FuzzingTypes_MyClass_ListOfInt(nint vectorPtr, DuckDbSharp.FuzzingTypes.MyClass[] objects, int objectsLength, nint parentValidity, DuckDbSharp.Bindings.NativeArenaSlim arena)
        {
            int sublistLength, innerRelIdx;
            int[] sublist;
            var totalCount = 0;
            var offsetsAndLengths = SerializationHelpers.GetVectorData<DuckDbSharp.Types.OffsetAndCount>(vectorPtr, objectsLength);
            var validityVector = SerializationHelpers.GetVectorValidityAndSetAll(vectorPtr);
            var rowId = 0;
            while (true)
            {
                if (rowId >= objectsLength)
                {
                    break;
                }
            
                if ((SerializationHelpers.IsPresent(parentValidity, rowId) &&
                    !(objects[rowId] == null)) &&
                    !(objects[rowId].ListOfInt == null))
                {
                    sublist = objects[rowId].ListOfInt;
                    sublistLength = sublist.Length;
                    SerializationHelpers.AssignSpanItem(offsetsAndLengths, rowId, new DuckDbSharp.Types.OffsetAndCount(totalCount, sublistLength));
                    checked { totalCount += sublistLength; };
                }
                else
                {
                    SerializationHelpers.SetNotPresent(validityVector, rowId);
                }
            
                rowId++;
            }
            var subobjects = SerializationHelpers.RentArray<int>(totalCount);
            var innerAbsIdx = 0;
            rowId = 0;
            while (true)
            {
                if (rowId >= objectsLength)
                {
                    break;
                }
            
                if ((SerializationHelpers.IsPresent(parentValidity, rowId) &&
                    !(objects[rowId] == null)) &&
                    !(objects[rowId].ListOfInt == null))
                {
                    sublist = objects[rowId].ListOfInt;
                    sublistLength = sublist.Length;
                    innerRelIdx = 0;
                    while (true)
                    {
                        if (innerRelIdx >= sublistLength)
                        {
                            break;
                        }
            
                        subobjects[innerAbsIdx++] = sublist[innerRelIdx];
                        innerRelIdx++;
                    }
                }
                rowId++;
            }
            SerializeField_System_Int32(SerializationHelpers.GetSublistChildVectorAndReserve(vectorPtr, totalCount), subobjects, totalCount, 0, arena);
            SerializationHelpers.ReleaseArray<int>(subobjects);
        }

        private static void SerializeField_DuckDbSharp_FuzzingTypes_MyClass_ListOfOptInt(nint vectorPtr, DuckDbSharp.FuzzingTypes.MyClass[] objects, int objectsLength, nint parentValidity, DuckDbSharp.Bindings.NativeArenaSlim arena)
        {
            int sublistLength, innerRelIdx;
            int?[] sublist;
            var totalCount = 0;
            var offsetsAndLengths = SerializationHelpers.GetVectorData<DuckDbSharp.Types.OffsetAndCount>(vectorPtr, objectsLength);
            var validityVector = SerializationHelpers.GetVectorValidityAndSetAll(vectorPtr);
            var rowId = 0;
            while (true)
            {
                if (rowId >= objectsLength)
                {
                    break;
                }
            
                if ((SerializationHelpers.IsPresent(parentValidity, rowId) &&
                    !(objects[rowId] == null)) &&
                    !(objects[rowId].ListOfOptInt == null))
                {
                    sublist = objects[rowId].ListOfOptInt;
                    sublistLength = sublist.Length;
                    SerializationHelpers.AssignSpanItem(offsetsAndLengths, rowId, new DuckDbSharp.Types.OffsetAndCount(totalCount, sublistLength));
                    checked { totalCount += sublistLength; };
                }
                else
                {
                    SerializationHelpers.SetNotPresent(validityVector, rowId);
                }
            
                rowId++;
            }
            var subobjects = SerializationHelpers.RentArray<int?>(totalCount);
            var innerAbsIdx = 0;
            rowId = 0;
            while (true)
            {
                if (rowId >= objectsLength)
                {
                    break;
                }
            
                if ((SerializationHelpers.IsPresent(parentValidity, rowId) &&
                    !(objects[rowId] == null)) &&
                    !(objects[rowId].ListOfOptInt == null))
                {
                    sublist = objects[rowId].ListOfOptInt;
                    sublistLength = sublist.Length;
                    innerRelIdx = 0;
                    while (true)
                    {
                        if (innerRelIdx >= sublistLength)
                        {
                            break;
                        }
            
                        subobjects[innerAbsIdx++] = sublist[innerRelIdx];
                        innerRelIdx++;
                    }
                }
                rowId++;
            }
            SerializeField_Nullable_System_Int32(SerializationHelpers.GetSublistChildVectorAndReserve(vectorPtr, totalCount), subobjects, totalCount, 0, arena);
            SerializationHelpers.ReleaseArray<int?>(subobjects);
        }

        private static void SerializeField_DuckDbSharp_FuzzingTypes_MyClass_Bytes(nint vectorPtr, DuckDbSharp.FuzzingTypes.MyClass[] objects, int objectsLength, nint parentValidity, DuckDbSharp.Bindings.NativeArenaSlim arena)
        {
            var validityVector = SerializationHelpers.GetVectorValidityAndSetAll(vectorPtr);
            var vectorSpan = SerializationHelpers.GetVectorData<DuckDbSharp.Types.DuckString>(vectorPtr, objectsLength);
            var i = 0;
            i = 0;
            while (true)
            {
                if (i >= vectorSpan.Length)
                {
                    break;
                }
            
                var arrayItem = objects[i];
            
                if ((SerializationHelpers.IsPresent(parentValidity, i) && !(arrayItem == null)) &&
                    !(arrayItem.Bytes == null))
                {
                    SerializationHelpers.AssignSpanItem(vectorSpan, i, SerializationHelpers.SerializeByteArray(arrayItem.Bytes, arena));
                }
                else
                {
                    SerializationHelpers.SetNotPresent(validityVector, i);
                }
                i++;
            }
        }

        private static void SerializeField_DuckDbSharp_FuzzingTypes_MyClass_ListOfObjs(nint vectorPtr, DuckDbSharp.FuzzingTypes.MyClass[] objects, int objectsLength, nint parentValidity, DuckDbSharp.Bindings.NativeArenaSlim arena)
        {
            int sublistLength, innerRelIdx;
            DuckDbSharp.FuzzingTypes.EvenInner[] sublist;
            var totalCount = 0;
            var offsetsAndLengths = SerializationHelpers.GetVectorData<DuckDbSharp.Types.OffsetAndCount>(vectorPtr, objectsLength);
            var validityVector = SerializationHelpers.GetVectorValidityAndSetAll(vectorPtr);
            var rowId = 0;
            while (true)
            {
                if (rowId >= objectsLength)
                {
                    break;
                }
            
                if ((SerializationHelpers.IsPresent(parentValidity, rowId) &&
                    !(objects[rowId] == null)) &&
                    !(objects[rowId].ListOfObjs == null))
                {
                    sublist = objects[rowId].ListOfObjs;
                    sublistLength = sublist.Length;
                    SerializationHelpers.AssignSpanItem(offsetsAndLengths, rowId, new DuckDbSharp.Types.OffsetAndCount(totalCount, sublistLength));
                    checked { totalCount += sublistLength; };
                }
                else
                {
                    SerializationHelpers.SetNotPresent(validityVector, rowId);
                }
            
                rowId++;
            }
            var subobjects = SerializationHelpers.RentArray<DuckDbSharp.FuzzingTypes.EvenInner>(totalCount);
            var innerAbsIdx = 0;
            rowId = 0;
            while (true)
            {
                if (rowId >= objectsLength)
                {
                    break;
                }
            
                if ((SerializationHelpers.IsPresent(parentValidity, rowId) &&
                    !(objects[rowId] == null)) &&
                    !(objects[rowId].ListOfObjs == null))
                {
                    sublist = objects[rowId].ListOfObjs;
                    sublistLength = sublist.Length;
                    innerRelIdx = 0;
                    while (true)
                    {
                        if (innerRelIdx >= sublistLength)
                        {
                            break;
                        }
            
                        subobjects[innerAbsIdx++] = sublist[innerRelIdx];
                        innerRelIdx++;
                    }
                }
                rowId++;
            }
            SerializeStruct_DuckDbSharp_FuzzingTypes_EvenInner(SerializationHelpers.GetSublistChildVectorAndReserve(vectorPtr, totalCount), subobjects, totalCount, 0, arena);
            SerializationHelpers.ReleaseArray<DuckDbSharp.FuzzingTypes.EvenInner>(subobjects);
        }

        private static void SerializeField_DuckDbSharp_FuzzingTypes_MyClass_ListOfNonNullStructs(nint vectorPtr, DuckDbSharp.FuzzingTypes.MyClass[] objects, int objectsLength, nint parentValidity, DuckDbSharp.Bindings.NativeArenaSlim arena)
        {
            int sublistLength, innerRelIdx;
            DuckDbSharp.FuzzingTypes.EvenInnerStruct[] sublist;
            var totalCount = 0;
            var offsetsAndLengths = SerializationHelpers.GetVectorData<DuckDbSharp.Types.OffsetAndCount>(vectorPtr, objectsLength);
            var validityVector = SerializationHelpers.GetVectorValidityAndSetAll(vectorPtr);
            var rowId = 0;
            while (true)
            {
                if (rowId >= objectsLength)
                {
                    break;
                }
            
                if ((SerializationHelpers.IsPresent(parentValidity, rowId) &&
                    !(objects[rowId] == null)) &&
                    !(objects[rowId].ListOfNonNullStructs == null))
                {
                    sublist = objects[rowId].ListOfNonNullStructs;
                    sublistLength = sublist.Length;
                    SerializationHelpers.AssignSpanItem(offsetsAndLengths, rowId, new DuckDbSharp.Types.OffsetAndCount(totalCount, sublistLength));
                    checked { totalCount += sublistLength; };
                }
                else
                {
                    SerializationHelpers.SetNotPresent(validityVector, rowId);
                }
            
                rowId++;
            }
            var subobjects = SerializationHelpers.RentArray<DuckDbSharp.FuzzingTypes.EvenInnerStruct>(totalCount);
            var innerAbsIdx = 0;
            rowId = 0;
            while (true)
            {
                if (rowId >= objectsLength)
                {
                    break;
                }
            
                if ((SerializationHelpers.IsPresent(parentValidity, rowId) &&
                    !(objects[rowId] == null)) &&
                    !(objects[rowId].ListOfNonNullStructs == null))
                {
                    sublist = objects[rowId].ListOfNonNullStructs;
                    sublistLength = sublist.Length;
                    innerRelIdx = 0;
                    while (true)
                    {
                        if (innerRelIdx >= sublistLength)
                        {
                            break;
                        }
            
                        subobjects[innerAbsIdx++] = sublist[innerRelIdx];
                        innerRelIdx++;
                    }
                }
                rowId++;
            }
            SerializeField_DuckDbSharp_FuzzingTypes_EvenInnerStruct(SerializationHelpers.GetSublistChildVectorAndReserve(vectorPtr, totalCount), subobjects, totalCount, 0, arena);
            SerializationHelpers.ReleaseArray<DuckDbSharp.FuzzingTypes.EvenInnerStruct>(subobjects);
        }

        private static void SerializeField_DuckDbSharp_FuzzingTypes_MyClass_ListOfOptionalStructs(nint vectorPtr, DuckDbSharp.FuzzingTypes.MyClass[] objects, int objectsLength, nint parentValidity, DuckDbSharp.Bindings.NativeArenaSlim arena)
        {
            int sublistLength, innerRelIdx;
            DuckDbSharp.FuzzingTypes.EvenInnerStruct?[] sublist;
            var totalCount = 0;
            var offsetsAndLengths = SerializationHelpers.GetVectorData<DuckDbSharp.Types.OffsetAndCount>(vectorPtr, objectsLength);
            var validityVector = SerializationHelpers.GetVectorValidityAndSetAll(vectorPtr);
            var rowId = 0;
            while (true)
            {
                if (rowId >= objectsLength)
                {
                    break;
                }
            
                if ((SerializationHelpers.IsPresent(parentValidity, rowId) &&
                    !(objects[rowId] == null)) &&
                    !(objects[rowId].ListOfOptionalStructs == null))
                {
                    sublist = objects[rowId].ListOfOptionalStructs;
                    sublistLength = sublist.Length;
                    SerializationHelpers.AssignSpanItem(offsetsAndLengths, rowId, new DuckDbSharp.Types.OffsetAndCount(totalCount, sublistLength));
                    checked { totalCount += sublistLength; };
                }
                else
                {
                    SerializationHelpers.SetNotPresent(validityVector, rowId);
                }
            
                rowId++;
            }
            var subobjects = SerializationHelpers.RentArray<DuckDbSharp.FuzzingTypes.EvenInnerStruct?>(totalCount);
            var innerAbsIdx = 0;
            rowId = 0;
            while (true)
            {
                if (rowId >= objectsLength)
                {
                    break;
                }
            
                if ((SerializationHelpers.IsPresent(parentValidity, rowId) &&
                    !(objects[rowId] == null)) &&
                    !(objects[rowId].ListOfOptionalStructs == null))
                {
                    sublist = objects[rowId].ListOfOptionalStructs;
                    sublistLength = sublist.Length;
                    innerRelIdx = 0;
                    while (true)
                    {
                        if (innerRelIdx >= sublistLength)
                        {
                            break;
                        }
            
                        subobjects[innerAbsIdx++] = sublist[innerRelIdx];
                        innerRelIdx++;
                    }
                }
                rowId++;
            }
            SerializeField_Nullable_DuckDbSharp_FuzzingTypes_EvenInnerStruct(SerializationHelpers.GetSublistChildVectorAndReserve(vectorPtr, totalCount), subobjects, totalCount, 0, arena);
            SerializationHelpers.ReleaseArray<DuckDbSharp.FuzzingTypes.EvenInnerStruct?>(subobjects);
        }

        private static void SerializeField_DuckDbSharp_FuzzingTypes_MyClass_ListWithNullishDefault(nint vectorPtr, DuckDbSharp.FuzzingTypes.MyClass[] objects, int objectsLength, nint parentValidity, DuckDbSharp.Bindings.NativeArenaSlim arena)
        {
            int sublistLength, innerRelIdx;
            DuckDbSharp.FuzzingTypes.WithNullishDefault[] sublist;
            var totalCount = 0;
            var offsetsAndLengths = SerializationHelpers.GetVectorData<DuckDbSharp.Types.OffsetAndCount>(vectorPtr, objectsLength);
            var validityVector = SerializationHelpers.GetVectorValidityAndSetAll(vectorPtr);
            var rowId = 0;
            while (true)
            {
                if (rowId >= objectsLength)
                {
                    break;
                }
            
                if ((SerializationHelpers.IsPresent(parentValidity, rowId) &&
                    !(objects[rowId] == null)) &&
                    !(objects[rowId].ListWithNullishDefault == null))
                {
                    sublist = objects[rowId].ListWithNullishDefault;
                    sublistLength = sublist.Length;
                    SerializationHelpers.AssignSpanItem(offsetsAndLengths, rowId, new DuckDbSharp.Types.OffsetAndCount(totalCount, sublistLength));
                    checked { totalCount += sublistLength; };
                }
                else
                {
                    SerializationHelpers.SetNotPresent(validityVector, rowId);
                }
            
                rowId++;
            }
            var subobjects = SerializationHelpers.RentArray<DuckDbSharp.FuzzingTypes.WithNullishDefault>(totalCount);
            var innerAbsIdx = 0;
            rowId = 0;
            while (true)
            {
                if (rowId >= objectsLength)
                {
                    break;
                }
            
                if ((SerializationHelpers.IsPresent(parentValidity, rowId) &&
                    !(objects[rowId] == null)) &&
                    !(objects[rowId].ListWithNullishDefault == null))
                {
                    sublist = objects[rowId].ListWithNullishDefault;
                    sublistLength = sublist.Length;
                    innerRelIdx = 0;
                    while (true)
                    {
                        if (innerRelIdx >= sublistLength)
                        {
                            break;
                        }
            
                        subobjects[innerAbsIdx++] = sublist[innerRelIdx];
                        innerRelIdx++;
                    }
                }
                rowId++;
            }
            SerializeStruct_DuckDbSharp_FuzzingTypes_WithNullishDefault(SerializationHelpers.GetSublistChildVectorAndReserve(vectorPtr, totalCount), subobjects, totalCount, 0, arena);
            SerializationHelpers.ReleaseArray<DuckDbSharp.FuzzingTypes.WithNullishDefault>(subobjects);
        }

        private static int SerializeColumns_DuckDbSharp_FuzzingTypes_MyClass(System.Collections.IEnumerator enumerator, nint chunk, DuckDbSharp.Bindings.NativeArenaSlim arena)
        {
            var typedEnumerator = (System.Collections.Generic.IEnumerator<DuckDbSharp.FuzzingTypes.MyClass>)enumerator;
            var buffer = SerializationHelpers.RentArray<DuckDbSharp.FuzzingTypes.MyClass>(2048);
            var itemCount = 0;
            while (true)
            {
                if (!enumerator.MoveNext())
                {
                    break;
                }
            
                buffer[itemCount++] = typedEnumerator.Current;
            
                if (itemCount == 2048)
                {
                    break;
                }
            }
            SerializeField_DuckDbSharp_FuzzingTypes_MyClass_Id(SerializationHelpers.GetDataChunkVector(chunk, 0), buffer, itemCount, 0, arena);
            SerializeField_DuckDbSharp_FuzzingTypes_MyClass_WithNullishDefault(SerializationHelpers.GetDataChunkVector(chunk, 1), buffer, itemCount, 0, arena);
            SerializeField_DuckDbSharp_FuzzingTypes_MyClass_SomeStruct(SerializationHelpers.GetDataChunkVector(chunk, 2), buffer, itemCount, 0, arena);
            SerializeField_DuckDbSharp_FuzzingTypes_MyClass_SomeOptionalStruct(SerializationHelpers.GetDataChunkVector(chunk, 3), buffer, itemCount, 0, arena);
            SerializeField_DuckDbSharp_FuzzingTypes_MyClass_InnerObj(SerializationHelpers.GetDataChunkVector(chunk, 4), buffer, itemCount, 0, arena);
            SerializeField_DuckDbSharp_FuzzingTypes_MyClass_C(SerializationHelpers.GetDataChunkVector(chunk, 5), buffer, itemCount, 0, arena);
            SerializeField_DuckDbSharp_FuzzingTypes_MyClass_ListOfInt(SerializationHelpers.GetDataChunkVector(chunk, 6), buffer, itemCount, 0, arena);
            SerializeField_DuckDbSharp_FuzzingTypes_MyClass_ListOfOptInt(SerializationHelpers.GetDataChunkVector(chunk, 7), buffer, itemCount, 0, arena);
            SerializeField_DuckDbSharp_FuzzingTypes_MyClass_Bytes(SerializationHelpers.GetDataChunkVector(chunk, 8), buffer, itemCount, 0, arena);
            SerializeField_DuckDbSharp_FuzzingTypes_MyClass_ListOfObjs(SerializationHelpers.GetDataChunkVector(chunk, 9), buffer, itemCount, 0, arena);
            SerializeField_DuckDbSharp_FuzzingTypes_MyClass_ListOfNonNullStructs(SerializationHelpers.GetDataChunkVector(chunk, 10), buffer, itemCount, 0, arena);
            SerializeField_DuckDbSharp_FuzzingTypes_MyClass_ListOfOptionalStructs(SerializationHelpers.GetDataChunkVector(chunk, 11), buffer, itemCount, 0, arena);
            SerializeField_DuckDbSharp_FuzzingTypes_MyClass_ListWithNullishDefault(SerializationHelpers.GetDataChunkVector(chunk, 12), buffer, itemCount, 0, arena);
            SerializationHelpers.ReleaseArray<DuckDbSharp.FuzzingTypes.MyClass>(buffer);
            
            return itemCount;
        }

        private static void DuckDbSharp_FuzzingTypes_MyClass_SetPropertyViaReflection_Id(DuckDbSharp.FuzzingTypes.MyClass[] arr, int idx, int val)
        {
            throw new System.NotImplementedException();
        }

        private static void DeserializeField_DuckDbSharp_FuzzingTypes_MyClass8b205741ac6669ebf1484ebda6afbd6984d3db24ebd4eba1095a8705dde0dd91_Id_0000000000000000000000000000000004000000000000000000000000000000(nint vectorPtr, DuckDbSharp.FuzzingTypes.MyClass[] objects, int objectsLength)
        {
            var validityVector = SerializationHelpers.GetVectorValidity(vectorPtr);
            var vectorSpan = SerializationHelpers.GetVectorData<int>(vectorPtr, objectsLength);
            var i = 0;
            i = 0;
            while (true)
            {
                if (i >= vectorSpan.Length)
                {
                    break;
                }
            
                if (SerializationHelpers.IsPresent(validityVector, i))
                {
                    DuckDbSharp_FuzzingTypes_MyClass_SetPropertyViaReflection_Id(objects, i, SerializationHelpers.ReadSpanItem(vectorSpan, i));
                }
                i++;
            }
        }

        private static void DuckDbSharp_FuzzingTypes_MyClass_SetPropertyViaReflection_WithNullishDefault(DuckDbSharp.FuzzingTypes.MyClass[] arr, int idx, DuckDbSharp.FuzzingTypes.WithNullishDefault val)
        {
            throw new System.NotImplementedException();
        }

        private static void DeserializeField_DuckDbSharp_FuzzingTypes_WithNullishDefault6f77cff4d9fcb046e7a07c9e168ab71e22b748a9cd8f9b363f12a65cf3ffbcc5_Num_0000000000000000000000000000000005000000000000000000000000000000(nint vectorPtr, DuckDbSharp.FuzzingTypes.WithNullishDefault[] objects, int objectsLength)
        {
            var validityVector = SerializationHelpers.GetVectorValidity(vectorPtr);
            var vectorSpan = SerializationHelpers.GetVectorData<long>(vectorPtr, objectsLength);
            var i = 0;
            i = 0;
            while (true)
            {
                if (i >= vectorSpan.Length)
                {
                    break;
                }
            
                if (SerializationHelpers.IsPresent(validityVector, i))
                {
                    objects[i].Num = SerializationHelpers.ReadSpanItem(vectorSpan, i);
                }
                i++;
            }
        }

        private static void DeserializeField_DuckDbSharp_FuzzingTypes_WithNullishDefault6f77cff4d9fcb046e7a07c9e168ab71e22b748a9cd8f9b363f12a65cf3ffbcc5_Str_0000000000000000000000000000000011000000000000000000000000000000(nint vectorPtr, DuckDbSharp.FuzzingTypes.WithNullishDefault[] objects, int objectsLength)
        {
            var validityVector = SerializationHelpers.GetVectorValidity(vectorPtr);
            var vectorSpan = SerializationHelpers.GetVectorData<DuckDbSharp.Types.DuckString>(vectorPtr, objectsLength);
            var i = 0;
            i = 0;
            while (true)
            {
                if (i >= vectorSpan.Length)
                {
                    break;
                }
            
                if (SerializationHelpers.IsPresent(validityVector, i))
                {
                    objects[i].Str = SerializationHelpers.DeserializeString(SerializationHelpers.ReadSpanItem(vectorSpan, i));
                }
                i++;
            }
        }

        private static void DeserializeStruct_DuckDbSharp_FuzzingTypes_WithNullishDefault6f77cff4d9fcb046e7a07c9e168ab71e22b748a9cd8f9b363f12a65cf3ffbcc5(nint vectorPtr, DuckDbSharp.FuzzingTypes.WithNullishDefault[] objects, int objectsLength)
        {
            DeserializeField_DuckDbSharp_FuzzingTypes_WithNullishDefault6f77cff4d9fcb046e7a07c9e168ab71e22b748a9cd8f9b363f12a65cf3ffbcc5_Num_0000000000000000000000000000000005000000000000000000000000000000(SerializationHelpers.GetStructureChildVector(vectorPtr, 0), objects, objectsLength);
            DeserializeField_DuckDbSharp_FuzzingTypes_WithNullishDefault6f77cff4d9fcb046e7a07c9e168ab71e22b748a9cd8f9b363f12a65cf3ffbcc5_Str_0000000000000000000000000000000011000000000000000000000000000000(SerializationHelpers.GetStructureChildVector(vectorPtr, 1), objects, objectsLength);
        }

        private static void DeserializeField_DuckDbSharp_FuzzingTypes_MyClass8b205741ac6669ebf1484ebda6afbd6984d3db24ebd4eba1095a8705dde0dd91_WithNullishDefault_6f77cff4d9fcb046e7a07c9e168ab71e22b748a9cd8f9b363f12a65cf3ffbcc5(nint vectorPtr, DuckDbSharp.FuzzingTypes.MyClass[] objects, int objectsLength)
        {
            var validityVector = SerializationHelpers.GetVectorValidity(vectorPtr);
            var subItems = SerializationHelpers.RentArrayZeroed<DuckDbSharp.FuzzingTypes.WithNullishDefault>(objectsLength);
            DeserializeStruct_DuckDbSharp_FuzzingTypes_WithNullishDefault6f77cff4d9fcb046e7a07c9e168ab71e22b748a9cd8f9b363f12a65cf3ffbcc5(vectorPtr, subItems, objectsLength);
            var rowId = 0;
            while (true)
            {
                if (rowId >= objectsLength)
                {
                    break;
                }
            
                if (SerializationHelpers.IsPresent(validityVector, rowId))
                {
                    DuckDbSharp_FuzzingTypes_MyClass_SetPropertyViaReflection_WithNullishDefault(objects, rowId, subItems[rowId]);
                }
                rowId++;
            }
            SerializationHelpers.ReleaseArray<DuckDbSharp.FuzzingTypes.WithNullishDefault>(subItems);
        }

        private static void DuckDbSharp_FuzzingTypes_MyClass_SetPropertyViaReflection_SomeStruct(DuckDbSharp.FuzzingTypes.MyClass[] arr, int idx, DuckDbSharp.FuzzingTypes.SomeStruct val)
        {
            throw new System.NotImplementedException();
        }

        private static void DeserializeField_DuckDbSharp_FuzzingTypes_SomeStructad01247c62e45b8ab63dd0c7cae7c3b7dbc8bf5ae1c8f18f807a6cc9e0d4373f_Num_0000000000000000000000000000000005000000000000000000000000000000(nint vectorPtr, DuckDbSharp.FuzzingTypes.SomeStruct[] objects, int objectsLength)
        {
            var validityVector = SerializationHelpers.GetVectorValidity(vectorPtr);
            var vectorSpan = SerializationHelpers.GetVectorData<long>(vectorPtr, objectsLength);
            var i = 0;
            i = 0;
            while (true)
            {
                if (i >= vectorSpan.Length)
                {
                    break;
                }
            
                if (SerializationHelpers.IsPresent(validityVector, i))
                {
                    objects[i].Num = SerializationHelpers.ReadSpanItem(vectorSpan, i);
                }
                i++;
            }
        }

        private static void DeserializeStruct_DuckDbSharp_FuzzingTypes_SomeStructad01247c62e45b8ab63dd0c7cae7c3b7dbc8bf5ae1c8f18f807a6cc9e0d4373f(nint vectorPtr, DuckDbSharp.FuzzingTypes.SomeStruct[] objects, int objectsLength)
        {
            DeserializeField_DuckDbSharp_FuzzingTypes_SomeStructad01247c62e45b8ab63dd0c7cae7c3b7dbc8bf5ae1c8f18f807a6cc9e0d4373f_Num_0000000000000000000000000000000005000000000000000000000000000000(SerializationHelpers.GetStructureChildVector(vectorPtr, 0), objects, objectsLength);
        }

        private static void DeserializeField_DuckDbSharp_FuzzingTypes_MyClass8b205741ac6669ebf1484ebda6afbd6984d3db24ebd4eba1095a8705dde0dd91_SomeStruct_ad01247c62e45b8ab63dd0c7cae7c3b7dbc8bf5ae1c8f18f807a6cc9e0d4373f(nint vectorPtr, DuckDbSharp.FuzzingTypes.MyClass[] objects, int objectsLength)
        {
            var validityVector = SerializationHelpers.GetVectorValidity(vectorPtr);
            var subItems = SerializationHelpers.RentArrayZeroed<DuckDbSharp.FuzzingTypes.SomeStruct>(objectsLength);
            DeserializeStruct_DuckDbSharp_FuzzingTypes_SomeStructad01247c62e45b8ab63dd0c7cae7c3b7dbc8bf5ae1c8f18f807a6cc9e0d4373f(vectorPtr, subItems, objectsLength);
            var rowId = 0;
            while (true)
            {
                if (rowId >= objectsLength)
                {
                    break;
                }
            
                if (SerializationHelpers.IsPresent(validityVector, rowId))
                {
                    DuckDbSharp_FuzzingTypes_MyClass_SetPropertyViaReflection_SomeStruct(objects, rowId, subItems[rowId]);
                }
                rowId++;
            }
            SerializationHelpers.ReleaseArray<DuckDbSharp.FuzzingTypes.SomeStruct>(subItems);
        }

        private static void DuckDbSharp_FuzzingTypes_MyClass_SetPropertyViaReflection_SomeOptionalStruct(DuckDbSharp.FuzzingTypes.MyClass[] arr, int idx, DuckDbSharp.FuzzingTypes.SomeStruct? val)
        {
            throw new System.NotImplementedException();
        }

        private static void Nullable_DuckDbSharp_FuzzingTypes_SomeStruct_SetFieldInsideNullable_Num(DuckDbSharp.FuzzingTypes.SomeStruct?[] arr, int idx, long val)
        {
            SerializationHelpers.GetReferenceToNullableWrappedValue(arr, idx).Num = val;
        }

        private static void DeserializeField_Nullable_DuckDbSharp_FuzzingTypes_SomeStructad01247c62e45b8ab63dd0c7cae7c3b7dbc8bf5ae1c8f18f807a6cc9e0d4373f_Num_0000000000000000000000000000000005000000000000000000000000000000(nint vectorPtr, DuckDbSharp.FuzzingTypes.SomeStruct?[] objects, int objectsLength)
        {
            var validityVector = SerializationHelpers.GetVectorValidity(vectorPtr);
            var vectorSpan = SerializationHelpers.GetVectorData<long>(vectorPtr, objectsLength);
            var i = 0;
            i = 0;
            while (true)
            {
                if (i >= vectorSpan.Length)
                {
                    break;
                }
            
                if (SerializationHelpers.IsPresent(validityVector, i))
                {
                    Nullable_DuckDbSharp_FuzzingTypes_SomeStruct_SetFieldInsideNullable_Num(objects, i, SerializationHelpers.ReadSpanItem(vectorSpan, i));
                }
                i++;
            }
        }

        private static void DeserializeStruct_Nullable_DuckDbSharp_FuzzingTypes_SomeStructad01247c62e45b8ab63dd0c7cae7c3b7dbc8bf5ae1c8f18f807a6cc9e0d4373f(nint vectorPtr, DuckDbSharp.FuzzingTypes.SomeStruct?[] objects, int objectsLength)
        {
            DeserializeField_Nullable_DuckDbSharp_FuzzingTypes_SomeStructad01247c62e45b8ab63dd0c7cae7c3b7dbc8bf5ae1c8f18f807a6cc9e0d4373f_Num_0000000000000000000000000000000005000000000000000000000000000000(SerializationHelpers.GetStructureChildVector(vectorPtr, 0), objects, objectsLength);
        }

        private static void DeserializeField_DuckDbSharp_FuzzingTypes_MyClass8b205741ac6669ebf1484ebda6afbd6984d3db24ebd4eba1095a8705dde0dd91_SomeOptionalStruct_ad01247c62e45b8ab63dd0c7cae7c3b7dbc8bf5ae1c8f18f807a6cc9e0d4373f(nint vectorPtr, DuckDbSharp.FuzzingTypes.MyClass[] objects, int objectsLength)
        {
            var validityVector = SerializationHelpers.GetVectorValidity(vectorPtr);
            var subItems = SerializationHelpers.RentArrayZeroed<DuckDbSharp.FuzzingTypes.SomeStruct?>(objectsLength);
            var rowId = 0;
            while (true)
            {
                if (rowId >= objectsLength)
                {
                    break;
                }
            
                if (SerializationHelpers.IsPresent(validityVector, rowId))
                {
                    subItems[rowId] = (DuckDbSharp.FuzzingTypes.SomeStruct?)default(DuckDbSharp.FuzzingTypes.SomeStruct);
                }
            
                rowId++;
            }
            DeserializeStruct_Nullable_DuckDbSharp_FuzzingTypes_SomeStructad01247c62e45b8ab63dd0c7cae7c3b7dbc8bf5ae1c8f18f807a6cc9e0d4373f(vectorPtr, subItems, objectsLength);
            rowId = 0;
            while (true)
            {
                if (rowId >= objectsLength)
                {
                    break;
                }
            
                if (SerializationHelpers.IsPresent(validityVector, rowId))
                {
                    DuckDbSharp_FuzzingTypes_MyClass_SetPropertyViaReflection_SomeOptionalStruct(objects, rowId, (DuckDbSharp.FuzzingTypes.SomeStruct?)subItems[rowId]);
                }
                rowId++;
            }
            SerializationHelpers.ReleaseArray<DuckDbSharp.FuzzingTypes.SomeStruct?>(subItems);
        }

        private static void DuckDbSharp_FuzzingTypes_MyClass_SetPropertyViaReflection_InnerObj(DuckDbSharp.FuzzingTypes.MyClass[] arr, int idx, DuckDbSharp.FuzzingTypes.InnerObj val)
        {
            throw new System.NotImplementedException();
        }

        private static void DuckDbSharp_FuzzingTypes_InnerObj_SetPropertyViaReflection_TheVal(DuckDbSharp.FuzzingTypes.InnerObj[] arr, int idx, int? val)
        {
            throw new System.NotImplementedException();
        }

        private static void DeserializeField_DuckDbSharp_FuzzingTypes_InnerObje6deb54a356d6644a68e0232d188bb9c1ba14be428a5bb719092b6d6493ffef7_TheVal_0000000000000000000000000000000004000000000000000000000000000000(nint vectorPtr, DuckDbSharp.FuzzingTypes.InnerObj[] objects, int objectsLength)
        {
            var validityVector = SerializationHelpers.GetVectorValidity(vectorPtr);
            var vectorSpan = SerializationHelpers.GetVectorData<int>(vectorPtr, objectsLength);
            var i = 0;
            i = 0;
            while (true)
            {
                if (i >= vectorSpan.Length)
                {
                    break;
                }
            
                if (SerializationHelpers.IsPresent(validityVector, i))
                {
                    DuckDbSharp_FuzzingTypes_InnerObj_SetPropertyViaReflection_TheVal(objects, i, (int?)SerializationHelpers.ReadSpanItem(vectorSpan, i));
                }
                i++;
            }
        }

        private static void DuckDbSharp_FuzzingTypes_InnerObj_SetPropertyViaReflection_Val2(DuckDbSharp.FuzzingTypes.InnerObj[] arr, int idx, int val)
        {
            throw new System.NotImplementedException();
        }

        private static void DeserializeField_DuckDbSharp_FuzzingTypes_InnerObje6deb54a356d6644a68e0232d188bb9c1ba14be428a5bb719092b6d6493ffef7_Val2_0000000000000000000000000000000004000000000000000000000000000000(nint vectorPtr, DuckDbSharp.FuzzingTypes.InnerObj[] objects, int objectsLength)
        {
            var validityVector = SerializationHelpers.GetVectorValidity(vectorPtr);
            var vectorSpan = SerializationHelpers.GetVectorData<int>(vectorPtr, objectsLength);
            var i = 0;
            i = 0;
            while (true)
            {
                if (i >= vectorSpan.Length)
                {
                    break;
                }
            
                if (SerializationHelpers.IsPresent(validityVector, i))
                {
                    DuckDbSharp_FuzzingTypes_InnerObj_SetPropertyViaReflection_Val2(objects, i, SerializationHelpers.ReadSpanItem(vectorSpan, i));
                }
                i++;
            }
        }

        private static void DuckDbSharp_FuzzingTypes_InnerObj_SetPropertyViaReflection_B(DuckDbSharp.FuzzingTypes.InnerObj[] arr, int idx, string val)
        {
            throw new System.NotImplementedException();
        }

        private static void DeserializeField_DuckDbSharp_FuzzingTypes_InnerObje6deb54a356d6644a68e0232d188bb9c1ba14be428a5bb719092b6d6493ffef7_B_0000000000000000000000000000000011000000000000000000000000000000(nint vectorPtr, DuckDbSharp.FuzzingTypes.InnerObj[] objects, int objectsLength)
        {
            var validityVector = SerializationHelpers.GetVectorValidity(vectorPtr);
            var vectorSpan = SerializationHelpers.GetVectorData<DuckDbSharp.Types.DuckString>(vectorPtr, objectsLength);
            var i = 0;
            i = 0;
            while (true)
            {
                if (i >= vectorSpan.Length)
                {
                    break;
                }
            
                if (SerializationHelpers.IsPresent(validityVector, i))
                {
                    DuckDbSharp_FuzzingTypes_InnerObj_SetPropertyViaReflection_B(objects, i, SerializationHelpers.DeserializeString(SerializationHelpers.ReadSpanItem(vectorSpan, i)));
                }
                i++;
            }
        }

        private static void DuckDbSharp_FuzzingTypes_InnerObj_SetPropertyViaReflection_EvenInner(DuckDbSharp.FuzzingTypes.InnerObj[] arr, int idx, DuckDbSharp.FuzzingTypes.EvenInner val)
        {
            throw new System.NotImplementedException();
        }

        private static void DuckDbSharp_FuzzingTypes_EvenInner_SetPropertyViaReflection_Q(DuckDbSharp.FuzzingTypes.EvenInner[] arr, int idx, int? val)
        {
            throw new System.NotImplementedException();
        }

        private static void DeserializeField_DuckDbSharp_FuzzingTypes_EvenInner1aa059dfc128dfa24858acbe7bd6deda4154229e97c8e207c9aa130a04ffca76_Q_0000000000000000000000000000000004000000000000000000000000000000(nint vectorPtr, DuckDbSharp.FuzzingTypes.EvenInner[] objects, int objectsLength)
        {
            var validityVector = SerializationHelpers.GetVectorValidity(vectorPtr);
            var vectorSpan = SerializationHelpers.GetVectorData<int>(vectorPtr, objectsLength);
            var i = 0;
            i = 0;
            while (true)
            {
                if (i >= vectorSpan.Length)
                {
                    break;
                }
            
                if (SerializationHelpers.IsPresent(validityVector, i))
                {
                    DuckDbSharp_FuzzingTypes_EvenInner_SetPropertyViaReflection_Q(objects, i, (int?)SerializationHelpers.ReadSpanItem(vectorSpan, i));
                }
                i++;
            }
        }

        private static void DeserializeStruct_DuckDbSharp_FuzzingTypes_EvenInner1aa059dfc128dfa24858acbe7bd6deda4154229e97c8e207c9aa130a04ffca76(nint vectorPtr, DuckDbSharp.FuzzingTypes.EvenInner[] objects, int objectsLength)
        {
            DeserializeField_DuckDbSharp_FuzzingTypes_EvenInner1aa059dfc128dfa24858acbe7bd6deda4154229e97c8e207c9aa130a04ffca76_Q_0000000000000000000000000000000004000000000000000000000000000000(SerializationHelpers.GetStructureChildVector(vectorPtr, 0), objects, objectsLength);
        }

        private static void DeserializeField_DuckDbSharp_FuzzingTypes_InnerObje6deb54a356d6644a68e0232d188bb9c1ba14be428a5bb719092b6d6493ffef7_EvenInner_1aa059dfc128dfa24858acbe7bd6deda4154229e97c8e207c9aa130a04ffca76(nint vectorPtr, DuckDbSharp.FuzzingTypes.InnerObj[] objects, int objectsLength)
        {
            var validityVector = SerializationHelpers.GetVectorValidity(vectorPtr);
            var subItems = SerializationHelpers.RentArrayZeroed<DuckDbSharp.FuzzingTypes.EvenInner>(objectsLength);
            var rowId = 0;
            while (true)
            {
                if (rowId >= objectsLength)
                {
                    break;
                }
            
                if (SerializationHelpers.IsPresent(validityVector, rowId))
                {
                    subItems[rowId] = SerializationHelpers.NewSkipCtor<DuckDbSharp.FuzzingTypes.EvenInner>();
                }
            
                rowId++;
            }
            DeserializeStruct_DuckDbSharp_FuzzingTypes_EvenInner1aa059dfc128dfa24858acbe7bd6deda4154229e97c8e207c9aa130a04ffca76(vectorPtr, subItems, objectsLength);
            rowId = 0;
            while (true)
            {
                if (rowId >= objectsLength)
                {
                    break;
                }
            
                if (SerializationHelpers.IsPresent(validityVector, rowId))
                {
                    DuckDbSharp_FuzzingTypes_InnerObj_SetPropertyViaReflection_EvenInner(objects, rowId, subItems[rowId]);
                }
                rowId++;
            }
            SerializationHelpers.ReleaseArray<DuckDbSharp.FuzzingTypes.EvenInner>(subItems);
        }

        private static void DuckDbSharp_FuzzingTypes_InnerObj_SetPropertyViaReflection_ListOfIntInner(DuckDbSharp.FuzzingTypes.InnerObj[] arr, int idx, int[] val)
        {
            throw new System.NotImplementedException();
        }

        private static void DeserializeField_System_Int320000000000000000000000000000000004000000000000000000000000000000(nint vectorPtr, int[] objects, int objectsLength)
        {
            var validityVector = SerializationHelpers.GetVectorValidity(vectorPtr);
            var vectorSpan = SerializationHelpers.GetVectorData<int>(vectorPtr, objectsLength);
            var i = 0;
            i = 0;
            while (true)
            {
                if (i >= vectorSpan.Length)
                {
                    break;
                }
            
                if (SerializationHelpers.IsPresent(validityVector, i))
                {
                    objects[i] = SerializationHelpers.ReadSpanItem(vectorSpan, i);
                }
                i++;
            }
        }

        private static void DeserializeField_DuckDbSharp_FuzzingTypes_InnerObje6deb54a356d6644a68e0232d188bb9c1ba14be428a5bb719092b6d6493ffef7_ListOfIntInner_5481b8528ef488d0a4ed259244306aff9b145b7d675e159efece21def7561297(nint vectorPtr, DuckDbSharp.FuzzingTypes.InnerObj[] objects, int objectsLength)
        {
            int[] sublist;
            int j, absIdx, sublistSize;
            var listValidityVector = SerializationHelpers.GetVectorValidity(vectorPtr);
            var elementValidityVector = SerializationHelpers.GetVectorValidity(SerializationHelpers.GetSublistChildVector(vectorPtr));
            var offsetsAndLengths = SerializationHelpers.GetVectorData<DuckDbSharp.Types.OffsetAndCount>(vectorPtr, objectsLength);
            var totalLength = SerializationHelpers.GetTotalItems(offsetsAndLengths, listValidityVector);
            var allSubItems = SerializationHelpers.RentArrayZeroed<int>(totalLength);
            DeserializeField_System_Int320000000000000000000000000000000004000000000000000000000000000000(SerializationHelpers.GetSublistChildVector(vectorPtr), allSubItems, totalLength);
            var rowId = 0;
            while (true)
            {
                if (rowId >= objectsLength)
                {
                    break;
                }
            
                if (SerializationHelpers.IsPresent(listValidityVector, rowId))
                {
                    sublistSize = SerializationHelpers.GetSublistSize(offsetsAndLengths, rowId);
                    sublist = SerializationHelpers.CreateArray<int>(sublistSize);
                    absIdx = SerializationHelpers.GetSublistOffset(offsetsAndLengths, rowId);
                    j = 0;
                    while (true)
                    {
                        if (j >= sublistSize)
                        {
                            break;
                        }
            
                        sublist[j] = allSubItems[absIdx];
                        absIdx++;
                        j++;
                    }
                    DuckDbSharp_FuzzingTypes_InnerObj_SetPropertyViaReflection_ListOfIntInner(objects, rowId, sublist);
                }
                rowId++;
            }
            SerializationHelpers.ReleaseArray<int>(allSubItems);
        }

        private static void DuckDbSharp_FuzzingTypes_InnerObj_SetPropertyViaReflection_ListOfOptIntInner(DuckDbSharp.FuzzingTypes.InnerObj[] arr, int idx, int?[] val)
        {
            throw new System.NotImplementedException();
        }

        private static void DeserializeField_Nullable_System_Int320000000000000000000000000000000004000000000000000000000000000000(nint vectorPtr, int?[] objects, int objectsLength)
        {
            var validityVector = SerializationHelpers.GetVectorValidity(vectorPtr);
            var vectorSpan = SerializationHelpers.GetVectorData<int>(vectorPtr, objectsLength);
            var i = 0;
            i = 0;
            while (true)
            {
                if (i >= vectorSpan.Length)
                {
                    break;
                }
            
                if (SerializationHelpers.IsPresent(validityVector, i))
                {
                    objects[i] = (int?)SerializationHelpers.ReadSpanItem(vectorSpan, i);
                }
                i++;
            }
        }

        private static void DeserializeField_DuckDbSharp_FuzzingTypes_InnerObje6deb54a356d6644a68e0232d188bb9c1ba14be428a5bb719092b6d6493ffef7_ListOfOptIntInner_5481b8528ef488d0a4ed259244306aff9b145b7d675e159efece21def7561297(nint vectorPtr, DuckDbSharp.FuzzingTypes.InnerObj[] objects, int objectsLength)
        {
            int?[] sublist;
            int j, absIdx, sublistSize;
            var listValidityVector = SerializationHelpers.GetVectorValidity(vectorPtr);
            var elementValidityVector = SerializationHelpers.GetVectorValidity(SerializationHelpers.GetSublistChildVector(vectorPtr));
            var offsetsAndLengths = SerializationHelpers.GetVectorData<DuckDbSharp.Types.OffsetAndCount>(vectorPtr, objectsLength);
            var totalLength = SerializationHelpers.GetTotalItems(offsetsAndLengths, listValidityVector);
            var allSubItems = SerializationHelpers.RentArrayZeroed<int?>(totalLength);
            var rowId = 0;
            while (true)
            {
                if (rowId >= totalLength)
                {
                    break;
                }
            
                if (SerializationHelpers.IsPresent(elementValidityVector, rowId))
                {
                    allSubItems[rowId] = (int?)default(int);
                }
            
                rowId++;
            }
            DeserializeField_Nullable_System_Int320000000000000000000000000000000004000000000000000000000000000000(SerializationHelpers.GetSublistChildVector(vectorPtr), allSubItems, totalLength);
            rowId = 0;
            while (true)
            {
                if (rowId >= objectsLength)
                {
                    break;
                }
            
                if (SerializationHelpers.IsPresent(listValidityVector, rowId))
                {
                    sublistSize = SerializationHelpers.GetSublistSize(offsetsAndLengths, rowId);
                    sublist = SerializationHelpers.CreateArray<int?>(sublistSize);
                    absIdx = SerializationHelpers.GetSublistOffset(offsetsAndLengths, rowId);
                    j = 0;
                    while (true)
                    {
                        if (j >= sublistSize)
                        {
                            break;
                        }
            
                        sublist[j] = allSubItems[absIdx];
                        absIdx++;
                        j++;
                    }
                    DuckDbSharp_FuzzingTypes_InnerObj_SetPropertyViaReflection_ListOfOptIntInner(objects, rowId, sublist);
                }
                rowId++;
            }
            SerializationHelpers.ReleaseArray<int?>(allSubItems);
        }

        private static void DuckDbSharp_FuzzingTypes_InnerObj_SetPropertyViaReflection_ListOfObjs(DuckDbSharp.FuzzingTypes.InnerObj[] arr, int idx, DuckDbSharp.FuzzingTypes.EvenInner[] val)
        {
            throw new System.NotImplementedException();
        }

        private static void DeserializeField_DuckDbSharp_FuzzingTypes_InnerObje6deb54a356d6644a68e0232d188bb9c1ba14be428a5bb719092b6d6493ffef7_ListOfObjs_eb8c4c0bba6bc8add2a7eeb2ba66b76891f4112a10e5989416ee7771afacc514(nint vectorPtr, DuckDbSharp.FuzzingTypes.InnerObj[] objects, int objectsLength)
        {
            DuckDbSharp.FuzzingTypes.EvenInner[] sublist;
            int j, absIdx, sublistSize;
            var listValidityVector = SerializationHelpers.GetVectorValidity(vectorPtr);
            var elementValidityVector = SerializationHelpers.GetVectorValidity(SerializationHelpers.GetSublistChildVector(vectorPtr));
            var offsetsAndLengths = SerializationHelpers.GetVectorData<DuckDbSharp.Types.OffsetAndCount>(vectorPtr, objectsLength);
            var totalLength = SerializationHelpers.GetTotalItems(offsetsAndLengths, listValidityVector);
            var allSubItems = SerializationHelpers.RentArrayZeroed<DuckDbSharp.FuzzingTypes.EvenInner>(totalLength);
            var rowId = 0;
            while (true)
            {
                if (rowId >= totalLength)
                {
                    break;
                }
            
                if (SerializationHelpers.IsPresent(elementValidityVector, rowId))
                {
                    allSubItems[rowId] = SerializationHelpers.NewSkipCtor<DuckDbSharp.FuzzingTypes.EvenInner>();
                }
            
                rowId++;
            }
            DeserializeStruct_DuckDbSharp_FuzzingTypes_EvenInner1aa059dfc128dfa24858acbe7bd6deda4154229e97c8e207c9aa130a04ffca76(SerializationHelpers.GetSublistChildVector(vectorPtr), allSubItems, totalLength);
            rowId = 0;
            while (true)
            {
                if (rowId >= objectsLength)
                {
                    break;
                }
            
                if (SerializationHelpers.IsPresent(listValidityVector, rowId))
                {
                    sublistSize = SerializationHelpers.GetSublistSize(offsetsAndLengths, rowId);
                    sublist = SerializationHelpers.CreateArray<DuckDbSharp.FuzzingTypes.EvenInner>(sublistSize);
                    absIdx = SerializationHelpers.GetSublistOffset(offsetsAndLengths, rowId);
                    j = 0;
                    while (true)
                    {
                        if (j >= sublistSize)
                        {
                            break;
                        }
            
                        sublist[j] = allSubItems[absIdx];
                        absIdx++;
                        j++;
                    }
                    DuckDbSharp_FuzzingTypes_InnerObj_SetPropertyViaReflection_ListOfObjs(objects, rowId, sublist);
                }
                rowId++;
            }
            SerializationHelpers.ReleaseArray<DuckDbSharp.FuzzingTypes.EvenInner>(allSubItems);
        }

        private static void DuckDbSharp_FuzzingTypes_InnerObj_SetPropertyViaReflection_ListOfNonNullStructs(DuckDbSharp.FuzzingTypes.InnerObj[] arr, int idx, DuckDbSharp.FuzzingTypes.EvenInnerStruct[] val)
        {
            throw new System.NotImplementedException();
        }

        private static void DeserializeField_DuckDbSharp_FuzzingTypes_EvenInnerStruct8b66ae5e481c90570505e75a068303475a350af52eabc71797bfb0679d8e2b8a_TheVal_0000000000000000000000000000000004000000000000000000000000000000(nint vectorPtr, DuckDbSharp.FuzzingTypes.EvenInnerStruct[] objects, int objectsLength)
        {
            var validityVector = SerializationHelpers.GetVectorValidity(vectorPtr);
            var vectorSpan = SerializationHelpers.GetVectorData<int>(vectorPtr, objectsLength);
            var i = 0;
            i = 0;
            while (true)
            {
                if (i >= vectorSpan.Length)
                {
                    break;
                }
            
                if (SerializationHelpers.IsPresent(validityVector, i))
                {
                    objects[i].TheVal = SerializationHelpers.ReadSpanItem(vectorSpan, i);
                }
                i++;
            }
        }

        private static void DeserializeField_DuckDbSharp_FuzzingTypes_EvenInnerStruct8b66ae5e481c90570505e75a068303475a350af52eabc71797bfb0679d8e2b8a(nint vectorPtr, DuckDbSharp.FuzzingTypes.EvenInnerStruct[] objects, int objectsLength)
        {
            DeserializeField_DuckDbSharp_FuzzingTypes_EvenInnerStruct8b66ae5e481c90570505e75a068303475a350af52eabc71797bfb0679d8e2b8a_TheVal_0000000000000000000000000000000004000000000000000000000000000000(SerializationHelpers.GetStructureChildVector(vectorPtr, 0), objects, objectsLength);
        }

        private static void DeserializeField_DuckDbSharp_FuzzingTypes_InnerObje6deb54a356d6644a68e0232d188bb9c1ba14be428a5bb719092b6d6493ffef7_ListOfNonNullStructs_2f75a360e47e3e827b3fff41a0eb90624d8cc5c041b832edaab38c0e41c4ba3d(nint vectorPtr, DuckDbSharp.FuzzingTypes.InnerObj[] objects, int objectsLength)
        {
            DuckDbSharp.FuzzingTypes.EvenInnerStruct[] sublist;
            int j, absIdx, sublistSize;
            var listValidityVector = SerializationHelpers.GetVectorValidity(vectorPtr);
            var elementValidityVector = SerializationHelpers.GetVectorValidity(SerializationHelpers.GetSublistChildVector(vectorPtr));
            var offsetsAndLengths = SerializationHelpers.GetVectorData<DuckDbSharp.Types.OffsetAndCount>(vectorPtr, objectsLength);
            var totalLength = SerializationHelpers.GetTotalItems(offsetsAndLengths, listValidityVector);
            var allSubItems = SerializationHelpers.RentArrayZeroed<DuckDbSharp.FuzzingTypes.EvenInnerStruct>(totalLength);
            DeserializeField_DuckDbSharp_FuzzingTypes_EvenInnerStruct8b66ae5e481c90570505e75a068303475a350af52eabc71797bfb0679d8e2b8a(SerializationHelpers.GetSublistChildVector(vectorPtr), allSubItems, totalLength);
            var rowId = 0;
            while (true)
            {
                if (rowId >= objectsLength)
                {
                    break;
                }
            
                if (SerializationHelpers.IsPresent(listValidityVector, rowId))
                {
                    sublistSize = SerializationHelpers.GetSublistSize(offsetsAndLengths, rowId);
                    sublist = SerializationHelpers.CreateArray<DuckDbSharp.FuzzingTypes.EvenInnerStruct>(sublistSize);
                    absIdx = SerializationHelpers.GetSublistOffset(offsetsAndLengths, rowId);
                    j = 0;
                    while (true)
                    {
                        if (j >= sublistSize)
                        {
                            break;
                        }
            
                        sublist[j] = allSubItems[absIdx];
                        absIdx++;
                        j++;
                    }
                    DuckDbSharp_FuzzingTypes_InnerObj_SetPropertyViaReflection_ListOfNonNullStructs(objects, rowId, sublist);
                }
                rowId++;
            }
            SerializationHelpers.ReleaseArray<DuckDbSharp.FuzzingTypes.EvenInnerStruct>(allSubItems);
        }

        private static void DuckDbSharp_FuzzingTypes_InnerObj_SetPropertyViaReflection_ListOfOptionalStructs(DuckDbSharp.FuzzingTypes.InnerObj[] arr, int idx, DuckDbSharp.FuzzingTypes.EvenInnerStruct?[] val)
        {
            throw new System.NotImplementedException();
        }

        private static void Nullable_DuckDbSharp_FuzzingTypes_EvenInnerStruct_SetFieldInsideNullable_TheVal(DuckDbSharp.FuzzingTypes.EvenInnerStruct?[] arr, int idx, int val)
        {
            SerializationHelpers.GetReferenceToNullableWrappedValue(arr, idx).TheVal = val;
        }

        private static void DeserializeField_Nullable_DuckDbSharp_FuzzingTypes_EvenInnerStruct8b66ae5e481c90570505e75a068303475a350af52eabc71797bfb0679d8e2b8a_TheVal_0000000000000000000000000000000004000000000000000000000000000000(nint vectorPtr, DuckDbSharp.FuzzingTypes.EvenInnerStruct?[] objects, int objectsLength)
        {
            var validityVector = SerializationHelpers.GetVectorValidity(vectorPtr);
            var vectorSpan = SerializationHelpers.GetVectorData<int>(vectorPtr, objectsLength);
            var i = 0;
            i = 0;
            while (true)
            {
                if (i >= vectorSpan.Length)
                {
                    break;
                }
            
                if (SerializationHelpers.IsPresent(validityVector, i))
                {
                    Nullable_DuckDbSharp_FuzzingTypes_EvenInnerStruct_SetFieldInsideNullable_TheVal(objects, i, SerializationHelpers.ReadSpanItem(vectorSpan, i));
                }
                i++;
            }
        }

        private static void DeserializeField_Nullable_DuckDbSharp_FuzzingTypes_EvenInnerStruct8b66ae5e481c90570505e75a068303475a350af52eabc71797bfb0679d8e2b8a(nint vectorPtr, DuckDbSharp.FuzzingTypes.EvenInnerStruct?[] objects, int objectsLength)
        {
            DeserializeField_Nullable_DuckDbSharp_FuzzingTypes_EvenInnerStruct8b66ae5e481c90570505e75a068303475a350af52eabc71797bfb0679d8e2b8a_TheVal_0000000000000000000000000000000004000000000000000000000000000000(SerializationHelpers.GetStructureChildVector(vectorPtr, 0), objects, objectsLength);
        }

        private static void DeserializeField_DuckDbSharp_FuzzingTypes_InnerObje6deb54a356d6644a68e0232d188bb9c1ba14be428a5bb719092b6d6493ffef7_ListOfOptionalStructs_2f75a360e47e3e827b3fff41a0eb90624d8cc5c041b832edaab38c0e41c4ba3d(nint vectorPtr, DuckDbSharp.FuzzingTypes.InnerObj[] objects, int objectsLength)
        {
            DuckDbSharp.FuzzingTypes.EvenInnerStruct?[] sublist;
            int j, absIdx, sublistSize;
            var listValidityVector = SerializationHelpers.GetVectorValidity(vectorPtr);
            var elementValidityVector = SerializationHelpers.GetVectorValidity(SerializationHelpers.GetSublistChildVector(vectorPtr));
            var offsetsAndLengths = SerializationHelpers.GetVectorData<DuckDbSharp.Types.OffsetAndCount>(vectorPtr, objectsLength);
            var totalLength = SerializationHelpers.GetTotalItems(offsetsAndLengths, listValidityVector);
            var allSubItems = SerializationHelpers.RentArrayZeroed<DuckDbSharp.FuzzingTypes.EvenInnerStruct?>(totalLength);
            var rowId = 0;
            while (true)
            {
                if (rowId >= totalLength)
                {
                    break;
                }
            
                if (SerializationHelpers.IsPresent(elementValidityVector, rowId))
                {
                    allSubItems[rowId] = (DuckDbSharp.FuzzingTypes.EvenInnerStruct?)default(DuckDbSharp.FuzzingTypes.EvenInnerStruct);
                }
            
                rowId++;
            }
            DeserializeField_Nullable_DuckDbSharp_FuzzingTypes_EvenInnerStruct8b66ae5e481c90570505e75a068303475a350af52eabc71797bfb0679d8e2b8a(SerializationHelpers.GetSublistChildVector(vectorPtr), allSubItems, totalLength);
            rowId = 0;
            while (true)
            {
                if (rowId >= objectsLength)
                {
                    break;
                }
            
                if (SerializationHelpers.IsPresent(listValidityVector, rowId))
                {
                    sublistSize = SerializationHelpers.GetSublistSize(offsetsAndLengths, rowId);
                    sublist = SerializationHelpers.CreateArray<DuckDbSharp.FuzzingTypes.EvenInnerStruct?>(sublistSize);
                    absIdx = SerializationHelpers.GetSublistOffset(offsetsAndLengths, rowId);
                    j = 0;
                    while (true)
                    {
                        if (j >= sublistSize)
                        {
                            break;
                        }
            
                        sublist[j] = allSubItems[absIdx];
                        absIdx++;
                        j++;
                    }
                    DuckDbSharp_FuzzingTypes_InnerObj_SetPropertyViaReflection_ListOfOptionalStructs(objects, rowId, sublist);
                }
                rowId++;
            }
            SerializationHelpers.ReleaseArray<DuckDbSharp.FuzzingTypes.EvenInnerStruct?>(allSubItems);
        }

        private static void DeserializeStruct_DuckDbSharp_FuzzingTypes_InnerObje6deb54a356d6644a68e0232d188bb9c1ba14be428a5bb719092b6d6493ffef7(nint vectorPtr, DuckDbSharp.FuzzingTypes.InnerObj[] objects, int objectsLength)
        {
            DeserializeField_DuckDbSharp_FuzzingTypes_InnerObje6deb54a356d6644a68e0232d188bb9c1ba14be428a5bb719092b6d6493ffef7_TheVal_0000000000000000000000000000000004000000000000000000000000000000(SerializationHelpers.GetStructureChildVector(vectorPtr, 0), objects, objectsLength);
            DeserializeField_DuckDbSharp_FuzzingTypes_InnerObje6deb54a356d6644a68e0232d188bb9c1ba14be428a5bb719092b6d6493ffef7_Val2_0000000000000000000000000000000004000000000000000000000000000000(SerializationHelpers.GetStructureChildVector(vectorPtr, 1), objects, objectsLength);
            DeserializeField_DuckDbSharp_FuzzingTypes_InnerObje6deb54a356d6644a68e0232d188bb9c1ba14be428a5bb719092b6d6493ffef7_B_0000000000000000000000000000000011000000000000000000000000000000(SerializationHelpers.GetStructureChildVector(vectorPtr, 2), objects, objectsLength);
            DeserializeField_DuckDbSharp_FuzzingTypes_InnerObje6deb54a356d6644a68e0232d188bb9c1ba14be428a5bb719092b6d6493ffef7_EvenInner_1aa059dfc128dfa24858acbe7bd6deda4154229e97c8e207c9aa130a04ffca76(SerializationHelpers.GetStructureChildVector(vectorPtr, 3), objects, objectsLength);
            DeserializeField_DuckDbSharp_FuzzingTypes_InnerObje6deb54a356d6644a68e0232d188bb9c1ba14be428a5bb719092b6d6493ffef7_ListOfIntInner_5481b8528ef488d0a4ed259244306aff9b145b7d675e159efece21def7561297(SerializationHelpers.GetStructureChildVector(vectorPtr, 4), objects, objectsLength);
            DeserializeField_DuckDbSharp_FuzzingTypes_InnerObje6deb54a356d6644a68e0232d188bb9c1ba14be428a5bb719092b6d6493ffef7_ListOfOptIntInner_5481b8528ef488d0a4ed259244306aff9b145b7d675e159efece21def7561297(SerializationHelpers.GetStructureChildVector(vectorPtr, 5), objects, objectsLength);
            DeserializeField_DuckDbSharp_FuzzingTypes_InnerObje6deb54a356d6644a68e0232d188bb9c1ba14be428a5bb719092b6d6493ffef7_ListOfObjs_eb8c4c0bba6bc8add2a7eeb2ba66b76891f4112a10e5989416ee7771afacc514(SerializationHelpers.GetStructureChildVector(vectorPtr, 6), objects, objectsLength);
            DeserializeField_DuckDbSharp_FuzzingTypes_InnerObje6deb54a356d6644a68e0232d188bb9c1ba14be428a5bb719092b6d6493ffef7_ListOfNonNullStructs_2f75a360e47e3e827b3fff41a0eb90624d8cc5c041b832edaab38c0e41c4ba3d(SerializationHelpers.GetStructureChildVector(vectorPtr, 7), objects, objectsLength);
            DeserializeField_DuckDbSharp_FuzzingTypes_InnerObje6deb54a356d6644a68e0232d188bb9c1ba14be428a5bb719092b6d6493ffef7_ListOfOptionalStructs_2f75a360e47e3e827b3fff41a0eb90624d8cc5c041b832edaab38c0e41c4ba3d(SerializationHelpers.GetStructureChildVector(vectorPtr, 8), objects, objectsLength);
        }

        private static void DeserializeField_DuckDbSharp_FuzzingTypes_MyClass8b205741ac6669ebf1484ebda6afbd6984d3db24ebd4eba1095a8705dde0dd91_InnerObj_e6deb54a356d6644a68e0232d188bb9c1ba14be428a5bb719092b6d6493ffef7(nint vectorPtr, DuckDbSharp.FuzzingTypes.MyClass[] objects, int objectsLength)
        {
            var validityVector = SerializationHelpers.GetVectorValidity(vectorPtr);
            var subItems = SerializationHelpers.RentArrayZeroed<DuckDbSharp.FuzzingTypes.InnerObj>(objectsLength);
            var rowId = 0;
            while (true)
            {
                if (rowId >= objectsLength)
                {
                    break;
                }
            
                if (SerializationHelpers.IsPresent(validityVector, rowId))
                {
                    subItems[rowId] = SerializationHelpers.NewSkipCtor<DuckDbSharp.FuzzingTypes.InnerObj>();
                }
            
                rowId++;
            }
            DeserializeStruct_DuckDbSharp_FuzzingTypes_InnerObje6deb54a356d6644a68e0232d188bb9c1ba14be428a5bb719092b6d6493ffef7(vectorPtr, subItems, objectsLength);
            rowId = 0;
            while (true)
            {
                if (rowId >= objectsLength)
                {
                    break;
                }
            
                if (SerializationHelpers.IsPresent(validityVector, rowId))
                {
                    DuckDbSharp_FuzzingTypes_MyClass_SetPropertyViaReflection_InnerObj(objects, rowId, subItems[rowId]);
                }
                rowId++;
            }
            SerializationHelpers.ReleaseArray<DuckDbSharp.FuzzingTypes.InnerObj>(subItems);
        }

        private static void DuckDbSharp_FuzzingTypes_MyClass_SetPropertyViaReflection_C(DuckDbSharp.FuzzingTypes.MyClass[] arr, int idx, string val)
        {
            throw new System.NotImplementedException();
        }

        private static void DeserializeField_DuckDbSharp_FuzzingTypes_MyClass8b205741ac6669ebf1484ebda6afbd6984d3db24ebd4eba1095a8705dde0dd91_C_0000000000000000000000000000000011000000000000000000000000000000(nint vectorPtr, DuckDbSharp.FuzzingTypes.MyClass[] objects, int objectsLength)
        {
            var validityVector = SerializationHelpers.GetVectorValidity(vectorPtr);
            var vectorSpan = SerializationHelpers.GetVectorData<DuckDbSharp.Types.DuckString>(vectorPtr, objectsLength);
            var i = 0;
            i = 0;
            while (true)
            {
                if (i >= vectorSpan.Length)
                {
                    break;
                }
            
                if (SerializationHelpers.IsPresent(validityVector, i))
                {
                    DuckDbSharp_FuzzingTypes_MyClass_SetPropertyViaReflection_C(objects, i, SerializationHelpers.DeserializeString(SerializationHelpers.ReadSpanItem(vectorSpan, i)));
                }
                i++;
            }
        }

        private static void DuckDbSharp_FuzzingTypes_MyClass_SetPropertyViaReflection_ListOfInt(DuckDbSharp.FuzzingTypes.MyClass[] arr, int idx, int[] val)
        {
            throw new System.NotImplementedException();
        }

        private static void DeserializeField_DuckDbSharp_FuzzingTypes_MyClass8b205741ac6669ebf1484ebda6afbd6984d3db24ebd4eba1095a8705dde0dd91_ListOfInt_5481b8528ef488d0a4ed259244306aff9b145b7d675e159efece21def7561297(nint vectorPtr, DuckDbSharp.FuzzingTypes.MyClass[] objects, int objectsLength)
        {
            int[] sublist;
            int j, absIdx, sublistSize;
            var listValidityVector = SerializationHelpers.GetVectorValidity(vectorPtr);
            var elementValidityVector = SerializationHelpers.GetVectorValidity(SerializationHelpers.GetSublistChildVector(vectorPtr));
            var offsetsAndLengths = SerializationHelpers.GetVectorData<DuckDbSharp.Types.OffsetAndCount>(vectorPtr, objectsLength);
            var totalLength = SerializationHelpers.GetTotalItems(offsetsAndLengths, listValidityVector);
            var allSubItems = SerializationHelpers.RentArrayZeroed<int>(totalLength);
            DeserializeField_System_Int320000000000000000000000000000000004000000000000000000000000000000(SerializationHelpers.GetSublistChildVector(vectorPtr), allSubItems, totalLength);
            var rowId = 0;
            while (true)
            {
                if (rowId >= objectsLength)
                {
                    break;
                }
            
                if (SerializationHelpers.IsPresent(listValidityVector, rowId))
                {
                    sublistSize = SerializationHelpers.GetSublistSize(offsetsAndLengths, rowId);
                    sublist = SerializationHelpers.CreateArray<int>(sublistSize);
                    absIdx = SerializationHelpers.GetSublistOffset(offsetsAndLengths, rowId);
                    j = 0;
                    while (true)
                    {
                        if (j >= sublistSize)
                        {
                            break;
                        }
            
                        sublist[j] = allSubItems[absIdx];
                        absIdx++;
                        j++;
                    }
                    DuckDbSharp_FuzzingTypes_MyClass_SetPropertyViaReflection_ListOfInt(objects, rowId, sublist);
                }
                rowId++;
            }
            SerializationHelpers.ReleaseArray<int>(allSubItems);
        }

        private static void DuckDbSharp_FuzzingTypes_MyClass_SetPropertyViaReflection_ListOfOptInt(DuckDbSharp.FuzzingTypes.MyClass[] arr, int idx, int?[] val)
        {
            throw new System.NotImplementedException();
        }

        private static void DeserializeField_DuckDbSharp_FuzzingTypes_MyClass8b205741ac6669ebf1484ebda6afbd6984d3db24ebd4eba1095a8705dde0dd91_ListOfOptInt_5481b8528ef488d0a4ed259244306aff9b145b7d675e159efece21def7561297(nint vectorPtr, DuckDbSharp.FuzzingTypes.MyClass[] objects, int objectsLength)
        {
            int?[] sublist;
            int j, absIdx, sublistSize;
            var listValidityVector = SerializationHelpers.GetVectorValidity(vectorPtr);
            var elementValidityVector = SerializationHelpers.GetVectorValidity(SerializationHelpers.GetSublistChildVector(vectorPtr));
            var offsetsAndLengths = SerializationHelpers.GetVectorData<DuckDbSharp.Types.OffsetAndCount>(vectorPtr, objectsLength);
            var totalLength = SerializationHelpers.GetTotalItems(offsetsAndLengths, listValidityVector);
            var allSubItems = SerializationHelpers.RentArrayZeroed<int?>(totalLength);
            var rowId = 0;
            while (true)
            {
                if (rowId >= totalLength)
                {
                    break;
                }
            
                if (SerializationHelpers.IsPresent(elementValidityVector, rowId))
                {
                    allSubItems[rowId] = (int?)default(int);
                }
            
                rowId++;
            }
            DeserializeField_Nullable_System_Int320000000000000000000000000000000004000000000000000000000000000000(SerializationHelpers.GetSublistChildVector(vectorPtr), allSubItems, totalLength);
            rowId = 0;
            while (true)
            {
                if (rowId >= objectsLength)
                {
                    break;
                }
            
                if (SerializationHelpers.IsPresent(listValidityVector, rowId))
                {
                    sublistSize = SerializationHelpers.GetSublistSize(offsetsAndLengths, rowId);
                    sublist = SerializationHelpers.CreateArray<int?>(sublistSize);
                    absIdx = SerializationHelpers.GetSublistOffset(offsetsAndLengths, rowId);
                    j = 0;
                    while (true)
                    {
                        if (j >= sublistSize)
                        {
                            break;
                        }
            
                        sublist[j] = allSubItems[absIdx];
                        absIdx++;
                        j++;
                    }
                    DuckDbSharp_FuzzingTypes_MyClass_SetPropertyViaReflection_ListOfOptInt(objects, rowId, sublist);
                }
                rowId++;
            }
            SerializationHelpers.ReleaseArray<int?>(allSubItems);
        }

        private static void DuckDbSharp_FuzzingTypes_MyClass_SetPropertyViaReflection_Bytes(DuckDbSharp.FuzzingTypes.MyClass[] arr, int idx, byte[] val)
        {
            throw new System.NotImplementedException();
        }

        private static void DeserializeField_DuckDbSharp_FuzzingTypes_MyClass8b205741ac6669ebf1484ebda6afbd6984d3db24ebd4eba1095a8705dde0dd91_Bytes_0000000000000000000000000000000012000000000000000000000000000000(nint vectorPtr, DuckDbSharp.FuzzingTypes.MyClass[] objects, int objectsLength)
        {
            var validityVector = SerializationHelpers.GetVectorValidity(vectorPtr);
            var vectorSpan = SerializationHelpers.GetVectorData<DuckDbSharp.Types.DuckString>(vectorPtr, objectsLength);
            var i = 0;
            i = 0;
            while (true)
            {
                if (i >= vectorSpan.Length)
                {
                    break;
                }
            
                if (SerializationHelpers.IsPresent(validityVector, i))
                {
                    DuckDbSharp_FuzzingTypes_MyClass_SetPropertyViaReflection_Bytes(objects, i, SerializationHelpers.DeserializeByteArray(SerializationHelpers.ReadSpanItem(vectorSpan, i)));
                }
                i++;
            }
        }

        private static void DuckDbSharp_FuzzingTypes_MyClass_SetPropertyViaReflection_ListOfObjs(DuckDbSharp.FuzzingTypes.MyClass[] arr, int idx, DuckDbSharp.FuzzingTypes.EvenInner[] val)
        {
            throw new System.NotImplementedException();
        }

        private static void DeserializeField_DuckDbSharp_FuzzingTypes_MyClass8b205741ac6669ebf1484ebda6afbd6984d3db24ebd4eba1095a8705dde0dd91_ListOfObjs_eb8c4c0bba6bc8add2a7eeb2ba66b76891f4112a10e5989416ee7771afacc514(nint vectorPtr, DuckDbSharp.FuzzingTypes.MyClass[] objects, int objectsLength)
        {
            DuckDbSharp.FuzzingTypes.EvenInner[] sublist;
            int j, absIdx, sublistSize;
            var listValidityVector = SerializationHelpers.GetVectorValidity(vectorPtr);
            var elementValidityVector = SerializationHelpers.GetVectorValidity(SerializationHelpers.GetSublistChildVector(vectorPtr));
            var offsetsAndLengths = SerializationHelpers.GetVectorData<DuckDbSharp.Types.OffsetAndCount>(vectorPtr, objectsLength);
            var totalLength = SerializationHelpers.GetTotalItems(offsetsAndLengths, listValidityVector);
            var allSubItems = SerializationHelpers.RentArrayZeroed<DuckDbSharp.FuzzingTypes.EvenInner>(totalLength);
            var rowId = 0;
            while (true)
            {
                if (rowId >= totalLength)
                {
                    break;
                }
            
                if (SerializationHelpers.IsPresent(elementValidityVector, rowId))
                {
                    allSubItems[rowId] = SerializationHelpers.NewSkipCtor<DuckDbSharp.FuzzingTypes.EvenInner>();
                }
            
                rowId++;
            }
            DeserializeStruct_DuckDbSharp_FuzzingTypes_EvenInner1aa059dfc128dfa24858acbe7bd6deda4154229e97c8e207c9aa130a04ffca76(SerializationHelpers.GetSublistChildVector(vectorPtr), allSubItems, totalLength);
            rowId = 0;
            while (true)
            {
                if (rowId >= objectsLength)
                {
                    break;
                }
            
                if (SerializationHelpers.IsPresent(listValidityVector, rowId))
                {
                    sublistSize = SerializationHelpers.GetSublistSize(offsetsAndLengths, rowId);
                    sublist = SerializationHelpers.CreateArray<DuckDbSharp.FuzzingTypes.EvenInner>(sublistSize);
                    absIdx = SerializationHelpers.GetSublistOffset(offsetsAndLengths, rowId);
                    j = 0;
                    while (true)
                    {
                        if (j >= sublistSize)
                        {
                            break;
                        }
            
                        sublist[j] = allSubItems[absIdx];
                        absIdx++;
                        j++;
                    }
                    DuckDbSharp_FuzzingTypes_MyClass_SetPropertyViaReflection_ListOfObjs(objects, rowId, sublist);
                }
                rowId++;
            }
            SerializationHelpers.ReleaseArray<DuckDbSharp.FuzzingTypes.EvenInner>(allSubItems);
        }

        private static void DuckDbSharp_FuzzingTypes_MyClass_SetPropertyViaReflection_ListOfNonNullStructs(DuckDbSharp.FuzzingTypes.MyClass[] arr, int idx, DuckDbSharp.FuzzingTypes.EvenInnerStruct[] val)
        {
            throw new System.NotImplementedException();
        }

        private static void DeserializeField_DuckDbSharp_FuzzingTypes_MyClass8b205741ac6669ebf1484ebda6afbd6984d3db24ebd4eba1095a8705dde0dd91_ListOfNonNullStructs_2f75a360e47e3e827b3fff41a0eb90624d8cc5c041b832edaab38c0e41c4ba3d(nint vectorPtr, DuckDbSharp.FuzzingTypes.MyClass[] objects, int objectsLength)
        {
            DuckDbSharp.FuzzingTypes.EvenInnerStruct[] sublist;
            int j, absIdx, sublistSize;
            var listValidityVector = SerializationHelpers.GetVectorValidity(vectorPtr);
            var elementValidityVector = SerializationHelpers.GetVectorValidity(SerializationHelpers.GetSublistChildVector(vectorPtr));
            var offsetsAndLengths = SerializationHelpers.GetVectorData<DuckDbSharp.Types.OffsetAndCount>(vectorPtr, objectsLength);
            var totalLength = SerializationHelpers.GetTotalItems(offsetsAndLengths, listValidityVector);
            var allSubItems = SerializationHelpers.RentArrayZeroed<DuckDbSharp.FuzzingTypes.EvenInnerStruct>(totalLength);
            DeserializeField_DuckDbSharp_FuzzingTypes_EvenInnerStruct8b66ae5e481c90570505e75a068303475a350af52eabc71797bfb0679d8e2b8a(SerializationHelpers.GetSublistChildVector(vectorPtr), allSubItems, totalLength);
            var rowId = 0;
            while (true)
            {
                if (rowId >= objectsLength)
                {
                    break;
                }
            
                if (SerializationHelpers.IsPresent(listValidityVector, rowId))
                {
                    sublistSize = SerializationHelpers.GetSublistSize(offsetsAndLengths, rowId);
                    sublist = SerializationHelpers.CreateArray<DuckDbSharp.FuzzingTypes.EvenInnerStruct>(sublistSize);
                    absIdx = SerializationHelpers.GetSublistOffset(offsetsAndLengths, rowId);
                    j = 0;
                    while (true)
                    {
                        if (j >= sublistSize)
                        {
                            break;
                        }
            
                        sublist[j] = allSubItems[absIdx];
                        absIdx++;
                        j++;
                    }
                    DuckDbSharp_FuzzingTypes_MyClass_SetPropertyViaReflection_ListOfNonNullStructs(objects, rowId, sublist);
                }
                rowId++;
            }
            SerializationHelpers.ReleaseArray<DuckDbSharp.FuzzingTypes.EvenInnerStruct>(allSubItems);
        }

        private static void DuckDbSharp_FuzzingTypes_MyClass_SetPropertyViaReflection_ListOfOptionalStructs(DuckDbSharp.FuzzingTypes.MyClass[] arr, int idx, DuckDbSharp.FuzzingTypes.EvenInnerStruct?[] val)
        {
            throw new System.NotImplementedException();
        }

        private static void DeserializeField_DuckDbSharp_FuzzingTypes_MyClass8b205741ac6669ebf1484ebda6afbd6984d3db24ebd4eba1095a8705dde0dd91_ListOfOptionalStructs_2f75a360e47e3e827b3fff41a0eb90624d8cc5c041b832edaab38c0e41c4ba3d(nint vectorPtr, DuckDbSharp.FuzzingTypes.MyClass[] objects, int objectsLength)
        {
            DuckDbSharp.FuzzingTypes.EvenInnerStruct?[] sublist;
            int j, absIdx, sublistSize;
            var listValidityVector = SerializationHelpers.GetVectorValidity(vectorPtr);
            var elementValidityVector = SerializationHelpers.GetVectorValidity(SerializationHelpers.GetSublistChildVector(vectorPtr));
            var offsetsAndLengths = SerializationHelpers.GetVectorData<DuckDbSharp.Types.OffsetAndCount>(vectorPtr, objectsLength);
            var totalLength = SerializationHelpers.GetTotalItems(offsetsAndLengths, listValidityVector);
            var allSubItems = SerializationHelpers.RentArrayZeroed<DuckDbSharp.FuzzingTypes.EvenInnerStruct?>(totalLength);
            var rowId = 0;
            while (true)
            {
                if (rowId >= totalLength)
                {
                    break;
                }
            
                if (SerializationHelpers.IsPresent(elementValidityVector, rowId))
                {
                    allSubItems[rowId] = (DuckDbSharp.FuzzingTypes.EvenInnerStruct?)default(DuckDbSharp.FuzzingTypes.EvenInnerStruct);
                }
            
                rowId++;
            }
            DeserializeField_Nullable_DuckDbSharp_FuzzingTypes_EvenInnerStruct8b66ae5e481c90570505e75a068303475a350af52eabc71797bfb0679d8e2b8a(SerializationHelpers.GetSublistChildVector(vectorPtr), allSubItems, totalLength);
            rowId = 0;
            while (true)
            {
                if (rowId >= objectsLength)
                {
                    break;
                }
            
                if (SerializationHelpers.IsPresent(listValidityVector, rowId))
                {
                    sublistSize = SerializationHelpers.GetSublistSize(offsetsAndLengths, rowId);
                    sublist = SerializationHelpers.CreateArray<DuckDbSharp.FuzzingTypes.EvenInnerStruct?>(sublistSize);
                    absIdx = SerializationHelpers.GetSublistOffset(offsetsAndLengths, rowId);
                    j = 0;
                    while (true)
                    {
                        if (j >= sublistSize)
                        {
                            break;
                        }
            
                        sublist[j] = allSubItems[absIdx];
                        absIdx++;
                        j++;
                    }
                    DuckDbSharp_FuzzingTypes_MyClass_SetPropertyViaReflection_ListOfOptionalStructs(objects, rowId, sublist);
                }
                rowId++;
            }
            SerializationHelpers.ReleaseArray<DuckDbSharp.FuzzingTypes.EvenInnerStruct?>(allSubItems);
        }

        private static void DuckDbSharp_FuzzingTypes_MyClass_SetPropertyViaReflection_ListWithNullishDefault(DuckDbSharp.FuzzingTypes.MyClass[] arr, int idx, DuckDbSharp.FuzzingTypes.WithNullishDefault[] val)
        {
            throw new System.NotImplementedException();
        }

        private static void DeserializeField_DuckDbSharp_FuzzingTypes_MyClass8b205741ac6669ebf1484ebda6afbd6984d3db24ebd4eba1095a8705dde0dd91_ListWithNullishDefault_9a993835d690bcd8edadd882bd59e0a1877932ae6fc5319893e7fa6930728082(nint vectorPtr, DuckDbSharp.FuzzingTypes.MyClass[] objects, int objectsLength)
        {
            DuckDbSharp.FuzzingTypes.WithNullishDefault[] sublist;
            int j, absIdx, sublistSize;
            var listValidityVector = SerializationHelpers.GetVectorValidity(vectorPtr);
            var elementValidityVector = SerializationHelpers.GetVectorValidity(SerializationHelpers.GetSublistChildVector(vectorPtr));
            var offsetsAndLengths = SerializationHelpers.GetVectorData<DuckDbSharp.Types.OffsetAndCount>(vectorPtr, objectsLength);
            var totalLength = SerializationHelpers.GetTotalItems(offsetsAndLengths, listValidityVector);
            var allSubItems = SerializationHelpers.RentArrayZeroed<DuckDbSharp.FuzzingTypes.WithNullishDefault>(totalLength);
            DeserializeStruct_DuckDbSharp_FuzzingTypes_WithNullishDefault6f77cff4d9fcb046e7a07c9e168ab71e22b748a9cd8f9b363f12a65cf3ffbcc5(SerializationHelpers.GetSublistChildVector(vectorPtr), allSubItems, totalLength);
            var rowId = 0;
            while (true)
            {
                if (rowId >= objectsLength)
                {
                    break;
                }
            
                if (SerializationHelpers.IsPresent(listValidityVector, rowId))
                {
                    sublistSize = SerializationHelpers.GetSublistSize(offsetsAndLengths, rowId);
                    sublist = SerializationHelpers.CreateArray<DuckDbSharp.FuzzingTypes.WithNullishDefault>(sublistSize);
                    absIdx = SerializationHelpers.GetSublistOffset(offsetsAndLengths, rowId);
                    j = 0;
                    while (true)
                    {
                        if (j >= sublistSize)
                        {
                            break;
                        }
            
                        sublist[j] = allSubItems[absIdx];
                        absIdx++;
                        j++;
                    }
                    DuckDbSharp_FuzzingTypes_MyClass_SetPropertyViaReflection_ListWithNullishDefault(objects, rowId, sublist);
                }
                rowId++;
            }
            SerializationHelpers.ReleaseArray<DuckDbSharp.FuzzingTypes.WithNullishDefault>(allSubItems);
        }

        private static System.Array DeserializeColumns_DuckDbSharp_FuzzingTypes_MyClass8b205741ac6669ebf1484ebda6afbd6984d3db24ebd4eba1095a8705dde0dd91(nint chunk)
        {
            var rowCount = SerializationHelpers.GetChunkSize(chunk);
            var result = new DuckDbSharp.FuzzingTypes.MyClass[rowCount];
            var i = 0;
            while (true)
            {
                if (i >= rowCount)
                {
                    break;
                }
            
                result[i] = SerializationHelpers.NewSkipCtor<DuckDbSharp.FuzzingTypes.MyClass>();
                i++;
            }
            DeserializeField_DuckDbSharp_FuzzingTypes_MyClass8b205741ac6669ebf1484ebda6afbd6984d3db24ebd4eba1095a8705dde0dd91_Id_0000000000000000000000000000000004000000000000000000000000000000(SerializationHelpers.GetDataChunkVector(chunk, 0), result, rowCount);
            DeserializeField_DuckDbSharp_FuzzingTypes_MyClass8b205741ac6669ebf1484ebda6afbd6984d3db24ebd4eba1095a8705dde0dd91_WithNullishDefault_6f77cff4d9fcb046e7a07c9e168ab71e22b748a9cd8f9b363f12a65cf3ffbcc5(SerializationHelpers.GetDataChunkVector(chunk, 1), result, rowCount);
            DeserializeField_DuckDbSharp_FuzzingTypes_MyClass8b205741ac6669ebf1484ebda6afbd6984d3db24ebd4eba1095a8705dde0dd91_SomeStruct_ad01247c62e45b8ab63dd0c7cae7c3b7dbc8bf5ae1c8f18f807a6cc9e0d4373f(SerializationHelpers.GetDataChunkVector(chunk, 2), result, rowCount);
            DeserializeField_DuckDbSharp_FuzzingTypes_MyClass8b205741ac6669ebf1484ebda6afbd6984d3db24ebd4eba1095a8705dde0dd91_SomeOptionalStruct_ad01247c62e45b8ab63dd0c7cae7c3b7dbc8bf5ae1c8f18f807a6cc9e0d4373f(SerializationHelpers.GetDataChunkVector(chunk, 3), result, rowCount);
            DeserializeField_DuckDbSharp_FuzzingTypes_MyClass8b205741ac6669ebf1484ebda6afbd6984d3db24ebd4eba1095a8705dde0dd91_InnerObj_e6deb54a356d6644a68e0232d188bb9c1ba14be428a5bb719092b6d6493ffef7(SerializationHelpers.GetDataChunkVector(chunk, 4), result, rowCount);
            DeserializeField_DuckDbSharp_FuzzingTypes_MyClass8b205741ac6669ebf1484ebda6afbd6984d3db24ebd4eba1095a8705dde0dd91_C_0000000000000000000000000000000011000000000000000000000000000000(SerializationHelpers.GetDataChunkVector(chunk, 5), result, rowCount);
            DeserializeField_DuckDbSharp_FuzzingTypes_MyClass8b205741ac6669ebf1484ebda6afbd6984d3db24ebd4eba1095a8705dde0dd91_ListOfInt_5481b8528ef488d0a4ed259244306aff9b145b7d675e159efece21def7561297(SerializationHelpers.GetDataChunkVector(chunk, 6), result, rowCount);
            DeserializeField_DuckDbSharp_FuzzingTypes_MyClass8b205741ac6669ebf1484ebda6afbd6984d3db24ebd4eba1095a8705dde0dd91_ListOfOptInt_5481b8528ef488d0a4ed259244306aff9b145b7d675e159efece21def7561297(SerializationHelpers.GetDataChunkVector(chunk, 7), result, rowCount);
            DeserializeField_DuckDbSharp_FuzzingTypes_MyClass8b205741ac6669ebf1484ebda6afbd6984d3db24ebd4eba1095a8705dde0dd91_Bytes_0000000000000000000000000000000012000000000000000000000000000000(SerializationHelpers.GetDataChunkVector(chunk, 8), result, rowCount);
            DeserializeField_DuckDbSharp_FuzzingTypes_MyClass8b205741ac6669ebf1484ebda6afbd6984d3db24ebd4eba1095a8705dde0dd91_ListOfObjs_eb8c4c0bba6bc8add2a7eeb2ba66b76891f4112a10e5989416ee7771afacc514(SerializationHelpers.GetDataChunkVector(chunk, 9), result, rowCount);
            DeserializeField_DuckDbSharp_FuzzingTypes_MyClass8b205741ac6669ebf1484ebda6afbd6984d3db24ebd4eba1095a8705dde0dd91_ListOfNonNullStructs_2f75a360e47e3e827b3fff41a0eb90624d8cc5c041b832edaab38c0e41c4ba3d(SerializationHelpers.GetDataChunkVector(chunk, 10), result, rowCount);
            DeserializeField_DuckDbSharp_FuzzingTypes_MyClass8b205741ac6669ebf1484ebda6afbd6984d3db24ebd4eba1095a8705dde0dd91_ListOfOptionalStructs_2f75a360e47e3e827b3fff41a0eb90624d8cc5c041b832edaab38c0e41c4ba3d(SerializationHelpers.GetDataChunkVector(chunk, 11), result, rowCount);
            DeserializeField_DuckDbSharp_FuzzingTypes_MyClass8b205741ac6669ebf1484ebda6afbd6984d3db24ebd4eba1095a8705dde0dd91_ListWithNullishDefault_9a993835d690bcd8edadd882bd59e0a1877932ae6fc5319893e7fa6930728082(SerializationHelpers.GetDataChunkVector(chunk, 12), result, rowCount);
            
            return result;
        }

    }
}

